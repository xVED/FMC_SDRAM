
FMC_SDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002eec  08002eec  00012eec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009a8  20000070  08002fdc  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20000a18  08002fdc  00020a18  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ea5f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002349  00000000  00000000  0002eaff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000054a1  00000000  00000000  00030e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009a0  00000000  00000000  000362f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c70  00000000  00000000  00036c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000052aa  00000000  00000000  00037900  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004147  00000000  00000000  0003cbaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00040cf1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001cbc  00000000  00000000  00040d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002ed4 	.word	0x08002ed4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002ed4 	.word	0x08002ed4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b97a 	b.w	80005cc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	468c      	mov	ip, r1
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	9e08      	ldr	r6, [sp, #32]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d151      	bne.n	80003a4 <__udivmoddi4+0xb4>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d96d      	bls.n	80003e2 <__udivmoddi4+0xf2>
 8000306:	fab2 fe82 	clz	lr, r2
 800030a:	f1be 0f00 	cmp.w	lr, #0
 800030e:	d00b      	beq.n	8000328 <__udivmoddi4+0x38>
 8000310:	f1ce 0c20 	rsb	ip, lr, #32
 8000314:	fa01 f50e 	lsl.w	r5, r1, lr
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000320:	ea4c 0c05 	orr.w	ip, ip, r5
 8000324:	fa00 f40e 	lsl.w	r4, r0, lr
 8000328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	fbbc f8fa 	udiv	r8, ip, sl
 8000332:	fa1f f987 	uxth.w	r9, r7
 8000336:	fb0a cc18 	mls	ip, sl, r8, ip
 800033a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800033e:	fb08 f309 	mul.w	r3, r8, r9
 8000342:	42ab      	cmp	r3, r5
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x6c>
 8000346:	19ed      	adds	r5, r5, r7
 8000348:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800034c:	f080 8123 	bcs.w	8000596 <__udivmoddi4+0x2a6>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f240 8120 	bls.w	8000596 <__udivmoddi4+0x2a6>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	443d      	add	r5, r7
 800035c:	1aed      	subs	r5, r5, r3
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb5 f0fa 	udiv	r0, r5, sl
 8000364:	fb0a 5510 	mls	r5, sl, r0, r5
 8000368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800036c:	fb00 f909 	mul.w	r9, r0, r9
 8000370:	45a1      	cmp	r9, r4
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x98>
 8000374:	19e4      	adds	r4, r4, r7
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	f080 810a 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800037e:	45a1      	cmp	r9, r4
 8000380:	f240 8107 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000384:	3802      	subs	r0, #2
 8000386:	443c      	add	r4, r7
 8000388:	eba4 0409 	sub.w	r4, r4, r9
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	2100      	movs	r1, #0
 8000392:	2e00      	cmp	r6, #0
 8000394:	d061      	beq.n	800045a <__udivmoddi4+0x16a>
 8000396:	fa24 f40e 	lsr.w	r4, r4, lr
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xc8>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d054      	beq.n	8000456 <__udivmoddi4+0x166>
 80003ac:	2100      	movs	r1, #0
 80003ae:	e886 0021 	stmia.w	r6, {r0, r5}
 80003b2:	4608      	mov	r0, r1
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	fab3 f183 	clz	r1, r3
 80003bc:	2900      	cmp	r1, #0
 80003be:	f040 808e 	bne.w	80004de <__udivmoddi4+0x1ee>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xdc>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80fa 	bhi.w	80005c0 <__udivmoddi4+0x2d0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb65 0503 	sbc.w	r5, r5, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	46ac      	mov	ip, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d03f      	beq.n	800045a <__udivmoddi4+0x16a>
 80003da:	e886 1010 	stmia.w	r6, {r4, ip}
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b912      	cbnz	r2, 80003ea <__udivmoddi4+0xfa>
 80003e4:	2701      	movs	r7, #1
 80003e6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ea:	fab7 fe87 	clz	lr, r7
 80003ee:	f1be 0f00 	cmp.w	lr, #0
 80003f2:	d134      	bne.n	800045e <__udivmoddi4+0x16e>
 80003f4:	1beb      	subs	r3, r5, r7
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	2101      	movs	r1, #1
 80003fe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000402:	0c25      	lsrs	r5, r4, #16
 8000404:	fb02 3318 	mls	r3, r2, r8, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb0c f308 	mul.w	r3, ip, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x134>
 8000414:	19ed      	adds	r5, r5, r7
 8000416:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x132>
 800041c:	42ab      	cmp	r3, r5
 800041e:	f200 80d1 	bhi.w	80005c4 <__udivmoddi4+0x2d4>
 8000422:	4680      	mov	r8, r0
 8000424:	1aed      	subs	r5, r5, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb5 f0f2 	udiv	r0, r5, r2
 800042c:	fb02 5510 	mls	r5, r2, r0, r5
 8000430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000434:	fb0c fc00 	mul.w	ip, ip, r0
 8000438:	45a4      	cmp	ip, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x15c>
 800043c:	19e4      	adds	r4, r4, r7
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x15a>
 8000444:	45a4      	cmp	ip, r4
 8000446:	f200 80b8 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000454:	e79d      	b.n	8000392 <__udivmoddi4+0xa2>
 8000456:	4631      	mov	r1, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1ce 0420 	rsb	r4, lr, #32
 8000462:	fa05 f30e 	lsl.w	r3, r5, lr
 8000466:	fa07 f70e 	lsl.w	r7, r7, lr
 800046a:	fa20 f804 	lsr.w	r8, r0, r4
 800046e:	0c3a      	lsrs	r2, r7, #16
 8000470:	fa25 f404 	lsr.w	r4, r5, r4
 8000474:	ea48 0803 	orr.w	r8, r8, r3
 8000478:	fbb4 f1f2 	udiv	r1, r4, r2
 800047c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000480:	fb02 4411 	mls	r4, r2, r1, r4
 8000484:	fa1f fc87 	uxth.w	ip, r7
 8000488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800048c:	fb01 f30c 	mul.w	r3, r1, ip
 8000490:	42ab      	cmp	r3, r5
 8000492:	fa00 f40e 	lsl.w	r4, r0, lr
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x1bc>
 8000498:	19ed      	adds	r5, r5, r7
 800049a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800049e:	f080 808a 	bcs.w	80005b6 <__udivmoddi4+0x2c6>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	f240 8087 	bls.w	80005b6 <__udivmoddi4+0x2c6>
 80004a8:	3902      	subs	r1, #2
 80004aa:	443d      	add	r5, r7
 80004ac:	1aeb      	subs	r3, r5, r3
 80004ae:	fa1f f588 	uxth.w	r5, r8
 80004b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004b6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004be:	fb00 f30c 	mul.w	r3, r0, ip
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1e6>
 80004c6:	19ed      	adds	r5, r5, r7
 80004c8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004cc:	d26f      	bcs.n	80005ae <__udivmoddi4+0x2be>
 80004ce:	42ab      	cmp	r3, r5
 80004d0:	d96d      	bls.n	80005ae <__udivmoddi4+0x2be>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	1aeb      	subs	r3, r5, r3
 80004d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004dc:	e78f      	b.n	80003fe <__udivmoddi4+0x10e>
 80004de:	f1c1 0720 	rsb	r7, r1, #32
 80004e2:	fa22 f807 	lsr.w	r8, r2, r7
 80004e6:	408b      	lsls	r3, r1
 80004e8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ec:	ea48 0303 	orr.w	r3, r8, r3
 80004f0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004fe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000502:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000506:	fb0c 5519 	mls	r5, ip, r9, r5
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000512:	fb09 f408 	mul.w	r4, r9, r8
 8000516:	42ac      	cmp	r4, r5
 8000518:	fa02 f201 	lsl.w	r2, r2, r1
 800051c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x244>
 8000522:	18ed      	adds	r5, r5, r3
 8000524:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000528:	d243      	bcs.n	80005b2 <__udivmoddi4+0x2c2>
 800052a:	42ac      	cmp	r4, r5
 800052c:	d941      	bls.n	80005b2 <__udivmoddi4+0x2c2>
 800052e:	f1a9 0902 	sub.w	r9, r9, #2
 8000532:	441d      	add	r5, r3
 8000534:	1b2d      	subs	r5, r5, r4
 8000536:	fa1f fe8e 	uxth.w	lr, lr
 800053a:	fbb5 f0fc 	udiv	r0, r5, ip
 800053e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000546:	fb00 f808 	mul.w	r8, r0, r8
 800054a:	45a0      	cmp	r8, r4
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x26e>
 800054e:	18e4      	adds	r4, r4, r3
 8000550:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000554:	d229      	bcs.n	80005aa <__udivmoddi4+0x2ba>
 8000556:	45a0      	cmp	r8, r4
 8000558:	d927      	bls.n	80005aa <__udivmoddi4+0x2ba>
 800055a:	3802      	subs	r0, #2
 800055c:	441c      	add	r4, r3
 800055e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000562:	eba4 0408 	sub.w	r4, r4, r8
 8000566:	fba0 8902 	umull	r8, r9, r0, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	46c6      	mov	lr, r8
 800056e:	464d      	mov	r5, r9
 8000570:	d315      	bcc.n	800059e <__udivmoddi4+0x2ae>
 8000572:	d012      	beq.n	800059a <__udivmoddi4+0x2aa>
 8000574:	b156      	cbz	r6, 800058c <__udivmoddi4+0x29c>
 8000576:	ebba 030e 	subs.w	r3, sl, lr
 800057a:	eb64 0405 	sbc.w	r4, r4, r5
 800057e:	fa04 f707 	lsl.w	r7, r4, r7
 8000582:	40cb      	lsrs	r3, r1
 8000584:	431f      	orrs	r7, r3
 8000586:	40cc      	lsrs	r4, r1
 8000588:	6037      	str	r7, [r6, #0]
 800058a:	6074      	str	r4, [r6, #4]
 800058c:	2100      	movs	r1, #0
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	4618      	mov	r0, r3
 8000594:	e6f8      	b.n	8000388 <__udivmoddi4+0x98>
 8000596:	4690      	mov	r8, r2
 8000598:	e6e0      	b.n	800035c <__udivmoddi4+0x6c>
 800059a:	45c2      	cmp	sl, r8
 800059c:	d2ea      	bcs.n	8000574 <__udivmoddi4+0x284>
 800059e:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a2:	eb69 0503 	sbc.w	r5, r9, r3
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7e4      	b.n	8000574 <__udivmoddi4+0x284>
 80005aa:	4628      	mov	r0, r5
 80005ac:	e7d7      	b.n	800055e <__udivmoddi4+0x26e>
 80005ae:	4640      	mov	r0, r8
 80005b0:	e791      	b.n	80004d6 <__udivmoddi4+0x1e6>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e7be      	b.n	8000534 <__udivmoddi4+0x244>
 80005b6:	4601      	mov	r1, r0
 80005b8:	e778      	b.n	80004ac <__udivmoddi4+0x1bc>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e745      	b.n	800044c <__udivmoddi4+0x15c>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e708      	b.n	80003d6 <__udivmoddi4+0xe6>
 80005c4:	f1a8 0802 	sub.w	r8, r8, #2
 80005c8:	443d      	add	r5, r7
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x134>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_InitTick+0x3c>)
{
 80005d4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_InitTick+0x40>)
 80005d8:	7818      	ldrb	r0, [r3, #0]
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	fbb3 f3f0 	udiv	r3, r3, r0
 80005e2:	6810      	ldr	r0, [r2, #0]
 80005e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005e8:	f000 f890 	bl	800070c <HAL_SYSTICK_Config>
 80005ec:	4604      	mov	r4, r0
 80005ee:	b958      	cbnz	r0, 8000608 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f0:	2d0f      	cmp	r5, #15
 80005f2:	d809      	bhi.n	8000608 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f4:	4602      	mov	r2, r0
 80005f6:	4629      	mov	r1, r5
 80005f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005fc:	f000 f84e 	bl	800069c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <HAL_InitTick+0x44>)
 8000602:	4620      	mov	r0, r4
 8000604:	601d      	str	r5, [r3, #0]
 8000606:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000608:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800060a:	bd38      	pop	{r3, r4, r5, pc}
 800060c:	20000000 	.word	0x20000000
 8000610:	20000008 	.word	0x20000008
 8000614:	20000004 	.word	0x20000004

08000618 <HAL_Init>:
{
 8000618:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800061a:	2003      	movs	r0, #3
 800061c:	f000 f82c 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ffd5 	bl	80005d0 <HAL_InitTick>
  HAL_MspInit();
 8000626:	f001 fe53 	bl	80022d0 <HAL_MspInit>
}
 800062a:	2000      	movs	r0, #0
 800062c:	bd08      	pop	{r3, pc}
	...

08000630 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x10>)
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_IncTick+0x14>)
 8000634:	6811      	ldr	r1, [r2, #0]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	440b      	add	r3, r1
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200000a0 	.word	0x200000a0
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <HAL_GetTick+0x8>)
 800064a:	6818      	ldr	r0, [r3, #0]
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000a0 	.word	0x200000a0

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b538      	push	{r3, r4, r5, lr}
 8000656:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000658:	f7ff fff6 	bl	8000648 <HAL_GetTick>
 800065c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800065e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000660:	bf1e      	ittt	ne
 8000662:	4b04      	ldrne	r3, [pc, #16]	; (8000674 <HAL_Delay+0x20>)
 8000664:	781b      	ldrbne	r3, [r3, #0]
 8000666:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000668:	f7ff ffee 	bl	8000648 <HAL_GetTick>
 800066c:	1b40      	subs	r0, r0, r5
 800066e:	4284      	cmp	r4, r0
 8000670:	d8fa      	bhi.n	8000668 <HAL_Delay+0x14>
  {
  }
}
 8000672:	bd38      	pop	{r3, r4, r5, pc}
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800067a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800067e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000686:	041b      	lsls	r3, r3, #16
 8000688:	0c1b      	lsrs	r3, r3, #16
 800068a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b8:	bf8c      	ite	hi
 80006ba:	3c03      	subhi	r4, #3
 80006bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006be:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80006c8:	ea01 0103 	and.w	r1, r1, r3
 80006cc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d0:	fa05 f404 	lsl.w	r4, r5, r4
 80006d4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80006d8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	ea42 0201 	orr.w	r2, r2, r1
 80006e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80006e4:	db07      	blt.n	80006f6 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006f0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006f4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	f000 000f 	and.w	r0, r0, #15
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <HAL_NVIC_SetPriority+0x6c>)
 80006fe:	541a      	strb	r2, [r3, r0]
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00
 8000708:	e000ed14 	.word	0xe000ed14

0800070c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800070c:	3801      	subs	r0, #1
 800070e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000712:	d20a      	bcs.n	800072a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	21f0      	movs	r1, #240	; 0xf0
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000722:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000724:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e010 	.word	0xe000e010
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000738:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_MPU_Disable+0x18>)
 800073e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000744:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000746:	2200      	movs	r2, #0
 8000748:	4b02      	ldr	r3, [pc, #8]	; (8000754 <HAL_MPU_Disable+0x1c>)
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00
 8000754:	e000ed90 	.word	0xe000ed90

08000758 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800075a:	f040 0001 	orr.w	r0, r0, #1
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MPU_Enable+0x20>)
 8000760:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000762:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800076e:	f3bf 8f6f 	isb	sy
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	e000ed90 	.word	0xe000ed90

0800077c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800077c:	7843      	ldrb	r3, [r0, #1]
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <HAL_MPU_ConfigRegion+0x4c>)
{
 8000780:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8000782:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8000784:	7801      	ldrb	r1, [r0, #0]
 8000786:	b1d9      	cbz	r1, 80007c0 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000788:	6843      	ldr	r3, [r0, #4]
 800078a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800078c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800078e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000790:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000792:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000796:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000798:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800079a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800079e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007a0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80007a4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007a6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80007aa:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80007b0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80007b6:	7a01      	ldrb	r1, [r0, #8]
 80007b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007bc:	6113      	str	r3, [r2, #16]
 80007be:	bd10      	pop	{r4, pc}
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80007c0:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80007c2:	6111      	str	r1, [r2, #16]
 80007c4:	bd10      	pop	{r4, pc}
 80007c6:	bf00      	nop
 80007c8:	e000ed90 	.word	0xe000ed90

080007cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d0:	680b      	ldr	r3, [r1, #0]
{
 80007d2:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000998 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d8:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80007da:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007dc:	4a6c      	ldr	r2, [pc, #432]	; (8000990 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007de:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800099c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80007e2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e4:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80007e6:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80007ea:	42ac      	cmp	r4, r5
 80007ec:	f040 80b6 	bne.w	800095c <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f0:	684c      	ldr	r4, [r1, #4]
 80007f2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80007f6:	f024 0c10 	bic.w	ip, r4, #16
 80007fa:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 80007fe:	2e01      	cmp	r6, #1
 8000800:	d812      	bhi.n	8000828 <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000802:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000804:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000806:	fa06 f60e 	lsl.w	r6, r6, lr
 800080a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800080e:	68ce      	ldr	r6, [r1, #12]
 8000810:	fa06 f60e 	lsl.w	r6, r6, lr
 8000814:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000816:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000818:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 800081c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800081e:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000820:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000824:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000826:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000828:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800082a:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000830:	fa06 f60e 	lsl.w	r6, r6, lr
 8000834:	ea6f 0606 	mvn.w	r6, r6
 8000838:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800083c:	688f      	ldr	r7, [r1, #8]
 800083e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000842:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000846:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000848:	d116      	bne.n	8000878 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 800084a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800084e:	f003 0b07 	and.w	fp, r3, #7
 8000852:	f04f 0c0f 	mov.w	ip, #15
 8000856:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800085a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800085e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000862:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000866:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800086a:	690f      	ldr	r7, [r1, #16]
 800086c:	fa07 f70b 	lsl.w	r7, r7, fp
 8000870:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000874:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000878:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800087a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800087c:	f004 0703 	and.w	r7, r4, #3
 8000880:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000884:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000888:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800088a:	00e6      	lsls	r6, r4, #3
 800088c:	d566      	bpl.n	800095c <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000892:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000896:	f003 0e03 	and.w	lr, r3, #3
 800089a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80008a2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008a6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 80008ae:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80008b2:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80008b6:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80008ba:	9603      	str	r6, [sp, #12]
 80008bc:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008be:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80008c2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008c6:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008ca:	4e32      	ldr	r6, [pc, #200]	; (8000994 <HAL_GPIO_Init+0x1c8>)
 80008cc:	42b0      	cmp	r0, r6
 80008ce:	d04c      	beq.n	800096a <HAL_GPIO_Init+0x19e>
 80008d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008d4:	42b0      	cmp	r0, r6
 80008d6:	d04a      	beq.n	800096e <HAL_GPIO_Init+0x1a2>
 80008d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008dc:	42b0      	cmp	r0, r6
 80008de:	d048      	beq.n	8000972 <HAL_GPIO_Init+0x1a6>
 80008e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008e4:	42b0      	cmp	r0, r6
 80008e6:	d046      	beq.n	8000976 <HAL_GPIO_Init+0x1aa>
 80008e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008ec:	42b0      	cmp	r0, r6
 80008ee:	d044      	beq.n	800097a <HAL_GPIO_Init+0x1ae>
 80008f0:	4548      	cmp	r0, r9
 80008f2:	d044      	beq.n	800097e <HAL_GPIO_Init+0x1b2>
 80008f4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80008f8:	42b0      	cmp	r0, r6
 80008fa:	d042      	beq.n	8000982 <HAL_GPIO_Init+0x1b6>
 80008fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000900:	42b0      	cmp	r0, r6
 8000902:	d040      	beq.n	8000986 <HAL_GPIO_Init+0x1ba>
 8000904:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000908:	42b0      	cmp	r0, r6
 800090a:	d03e      	beq.n	800098a <HAL_GPIO_Init+0x1be>
 800090c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000910:	42b0      	cmp	r0, r6
 8000912:	bf14      	ite	ne
 8000914:	260a      	movne	r6, #10
 8000916:	2609      	moveq	r6, #9
 8000918:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800091c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000920:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000924:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000926:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 800092a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800092c:	bf0c      	ite	eq
 800092e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000930:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000932:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000936:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000938:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800093a:	bf0c      	ite	eq
 800093c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800093e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000940:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000944:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000946:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000948:	bf0c      	ite	eq
 800094a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800094c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800094e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000950:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000952:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000954:	bf54      	ite	pl
 8000956:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000958:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800095a:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800095c:	3301      	adds	r3, #1
 800095e:	2b10      	cmp	r3, #16
 8000960:	f47f af3f 	bne.w	80007e2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000964:	b005      	add	sp, #20
 8000966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800096a:	2600      	movs	r6, #0
 800096c:	e7d4      	b.n	8000918 <HAL_GPIO_Init+0x14c>
 800096e:	2601      	movs	r6, #1
 8000970:	e7d2      	b.n	8000918 <HAL_GPIO_Init+0x14c>
 8000972:	2602      	movs	r6, #2
 8000974:	e7d0      	b.n	8000918 <HAL_GPIO_Init+0x14c>
 8000976:	2603      	movs	r6, #3
 8000978:	e7ce      	b.n	8000918 <HAL_GPIO_Init+0x14c>
 800097a:	2604      	movs	r6, #4
 800097c:	e7cc      	b.n	8000918 <HAL_GPIO_Init+0x14c>
 800097e:	2605      	movs	r6, #5
 8000980:	e7ca      	b.n	8000918 <HAL_GPIO_Init+0x14c>
 8000982:	2606      	movs	r6, #6
 8000984:	e7c8      	b.n	8000918 <HAL_GPIO_Init+0x14c>
 8000986:	2607      	movs	r6, #7
 8000988:	e7c6      	b.n	8000918 <HAL_GPIO_Init+0x14c>
 800098a:	2608      	movs	r6, #8
 800098c:	e7c4      	b.n	8000918 <HAL_GPIO_Init+0x14c>
 800098e:	bf00      	nop
 8000990:	40013c00 	.word	0x40013c00
 8000994:	40020000 	.word	0x40020000
 8000998:	40023800 	.word	0x40023800
 800099c:	40021400 	.word	0x40021400

080009a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009a0:	b10a      	cbz	r2, 80009a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80009a2:	6181      	str	r1, [r0, #24]
 80009a4:	4770      	bx	lr
 80009a6:	0409      	lsls	r1, r1, #16
 80009a8:	e7fb      	b.n	80009a2 <HAL_GPIO_WritePin+0x2>

080009aa <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009aa:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80009ac:	f04f 0c00 	mov.w	ip, #0
{
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009b4:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80009b6:	6804      	ldr	r4, [r0, #0]
 80009b8:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009ba:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80009bc:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009be:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009c2:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80009c4:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009c8:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80009cc:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009d0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80009d4:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009d6:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009d8:	68e0      	ldr	r0, [r4, #12]
 80009da:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80009de:	4430      	add	r0, r6
 80009e0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80009e4:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009e6:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80009e8:	68e0      	ldr	r0, [r4, #12]
 80009ea:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80009ee:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80009f0:	6898      	ldr	r0, [r3, #8]
 80009f2:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80009f6:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80009f8:	6888      	ldr	r0, [r1, #8]
 80009fa:	68e6      	ldr	r6, [r4, #12]
 80009fc:	3001      	adds	r0, #1
 80009fe:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8000a02:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000a04:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000a06:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a0a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000a0c:	6918      	ldr	r0, [r3, #16]
 8000a0e:	f020 0007 	bic.w	r0, r0, #7
 8000a12:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000a14:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000a16:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8000a18:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8000a1c:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000a20:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8000a24:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8000a28:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8000a2c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8000a30:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a34:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000a36:	6958      	ldr	r0, [r3, #20]
 8000a38:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8000a3c:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000a3e:	6948      	ldr	r0, [r1, #20]
 8000a40:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000a42:	69d8      	ldr	r0, [r3, #28]
 8000a44:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000a48:	f020 0007 	bic.w	r0, r0, #7
 8000a4c:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000a4e:	6a08      	ldr	r0, [r1, #32]
 8000a50:	69cd      	ldr	r5, [r1, #28]
 8000a52:	4305      	orrs	r5, r0
 8000a54:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000a56:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000a58:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000a5a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000a5e:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000a60:	b31e      	cbz	r6, 8000aaa <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000a62:	2e01      	cmp	r6, #1
 8000a64:	d023      	beq.n	8000aae <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000a66:	1eb0      	subs	r0, r6, #2
 8000a68:	2802      	cmp	r0, #2
 8000a6a:	d922      	bls.n	8000ab2 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000a6c:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8000a6e:	bf0c      	ite	eq
 8000a70:	2002      	moveq	r0, #2
 8000a72:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000a74:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a76:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000a7a:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8000a7e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a80:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000a82:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a84:	4345      	muls	r5, r0
 8000a86:	4378      	muls	r0, r7
 8000a88:	3003      	adds	r0, #3
 8000a8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a8e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000a90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a92:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000a96:	f020 0007 	bic.w	r0, r0, #7
 8000a9a:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000a9c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000a9e:	58a3      	ldr	r3, [r4, r2]
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	50a3      	str	r3, [r4, r2]
 8000aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8000aaa:	2004      	movs	r0, #4
 8000aac:	e7e2      	b.n	8000a74 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8000aae:	2003      	movs	r0, #3
 8000ab0:	e7e0      	b.n	8000a74 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	e7de      	b.n	8000a74 <LTDC_SetConfig+0xca>
	...

08000ab8 <HAL_LTDC_Init>:
{
 8000ab8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8000aba:	4604      	mov	r4, r0
 8000abc:	2800      	cmp	r0, #0
 8000abe:	d063      	beq.n	8000b88 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8000ac0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8000ac4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ac8:	b91b      	cbnz	r3, 8000ad2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8000aca:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8000ace:	f001 fc17 	bl	8002300 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ad2:	2302      	movs	r3, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ad4:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ad6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	699a      	ldr	r2, [r3, #24]
 8000ade:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000ae2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ae4:	6862      	ldr	r2, [r4, #4]
 8000ae6:	6999      	ldr	r1, [r3, #24]
 8000ae8:	4302      	orrs	r2, r0
 8000aea:	68e0      	ldr	r0, [r4, #12]
 8000aec:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000aee:	6920      	ldr	r0, [r4, #16]
 8000af0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8000af2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000af4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000af6:	4925      	ldr	r1, [pc, #148]	; (8000b8c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000af8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	400a      	ands	r2, r1
 8000afe:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b06:	69a0      	ldr	r0, [r4, #24]
 8000b08:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8000b0a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000b0c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	400a      	ands	r2, r1
 8000b12:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b1a:	6a20      	ldr	r0, [r4, #32]
 8000b1c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8000b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000b20:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000b22:	691a      	ldr	r2, [r3, #16]
 8000b24:	400a      	ands	r2, r1
 8000b26:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000b28:	691a      	ldr	r2, [r3, #16]
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000b30:	4302      	orrs	r2, r0
 8000b32:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000b34:	695a      	ldr	r2, [r3, #20]
 8000b36:	4011      	ands	r1, r2
 8000b38:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8000b3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000b3c:	695a      	ldr	r2, [r3, #20]
 8000b3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000b44:	430a      	orrs	r2, r1
 8000b46:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8000b4a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000b4e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8000b52:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000b56:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b5a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000b64:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000b68:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8000b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b6e:	f042 0206 	orr.w	r2, r2, #6
 8000b72:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8000b74:	699a      	ldr	r2, [r3, #24]
 8000b76:	f042 0201 	orr.w	r2, r2, #1
 8000b7a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8000b7c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000b7e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8000b82:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8000b86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b88:	2001      	movs	r0, #1
}
 8000b8a:	bd38      	pop	{r3, r4, r5, pc}
 8000b8c:	f000f800 	.word	0xf000f800

08000b90 <HAL_LTDC_ConfigLayer>:
{
 8000b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8000b92:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8000b96:	4606      	mov	r6, r0
 8000b98:	468e      	mov	lr, r1
 8000b9a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	f04f 0002 	mov.w	r0, #2
 8000ba2:	d01d      	beq.n	8000be0 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000ba4:	2434      	movs	r4, #52	; 0x34
 8000ba6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ba8:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8000bac:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000bae:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8000bb2:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000bb6:	3438      	adds	r4, #56	; 0x38
 8000bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc4:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4662      	mov	r2, ip
 8000bca:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000bcc:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000bce:	f7ff feec 	bl	80009aa <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000bd2:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8000bd4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000bd6:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8000bd8:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8000bdc:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8000be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000be4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000be6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bea:	4c19      	ldr	r4, [pc, #100]	; (8000c50 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c02:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c04:	f7ff fd20 	bl	8000648 <HAL_GetTick>
 8000c08:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c0a:	6863      	ldr	r3, [r4, #4]
 8000c0c:	03da      	lsls	r2, r3, #15
 8000c0e:	d50c      	bpl.n	8000c2a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c16:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c18:	f7ff fd16 	bl	8000648 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c1c:	4c0c      	ldr	r4, [pc, #48]	; (8000c50 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000c1e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c20:	6863      	ldr	r3, [r4, #4]
 8000c22:	039b      	lsls	r3, r3, #14
 8000c24:	d50a      	bpl.n	8000c3c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000c26:	2000      	movs	r0, #0
 8000c28:	e006      	b.n	8000c38 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c2a:	f7ff fd0d 	bl	8000648 <HAL_GetTick>
 8000c2e:	1b40      	subs	r0, r0, r5
 8000c30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c34:	d9e9      	bls.n	8000c0a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000c36:	2003      	movs	r0, #3
}
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c3c:	f7ff fd04 	bl	8000648 <HAL_GetTick>
 8000c40:	1b40      	subs	r0, r0, r5
 8000c42:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c46:	d9eb      	bls.n	8000c20 <HAL_PWREx_EnableOverDrive+0x3c>
 8000c48:	e7f5      	b.n	8000c36 <HAL_PWREx_EnableOverDrive+0x52>
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c58:	4604      	mov	r4, r0
 8000c5a:	b908      	cbnz	r0, 8000c60 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	e03f      	b.n	8000ce0 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c60:	6803      	ldr	r3, [r0, #0]
 8000c62:	07d8      	lsls	r0, r3, #31
 8000c64:	d410      	bmi.n	8000c88 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	0799      	lsls	r1, r3, #30
 8000c6a:	d460      	bmi.n	8000d2e <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	0719      	lsls	r1, r3, #28
 8000c70:	f100 80a5 	bmi.w	8000dbe <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	075a      	lsls	r2, r3, #29
 8000c78:	f100 80c6 	bmi.w	8000e08 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c7c:	69a0      	ldr	r0, [r4, #24]
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	f040 8130 	bne.w	8000ee4 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8000c84:	2000      	movs	r0, #0
 8000c86:	e02b      	b.n	8000ce0 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c88:	4b94      	ldr	r3, [pc, #592]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	f002 020c 	and.w	r2, r2, #12
 8000c90:	2a04      	cmp	r2, #4
 8000c92:	d007      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	f002 020c 	and.w	r2, r2, #12
 8000c9a:	2a08      	cmp	r2, #8
 8000c9c:	d10a      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x60>
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	025a      	lsls	r2, r3, #9
 8000ca2:	d507      	bpl.n	8000cb4 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca4:	4b8d      	ldr	r3, [pc, #564]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	039b      	lsls	r3, r3, #14
 8000caa:	d5dc      	bpl.n	8000c66 <HAL_RCC_OscConfig+0x12>
 8000cac:	6863      	ldr	r3, [r4, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1d9      	bne.n	8000c66 <HAL_RCC_OscConfig+0x12>
 8000cb2:	e7d3      	b.n	8000c5c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	4d89      	ldr	r5, [pc, #548]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cbc:	d113      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x92>
 8000cbe:	682b      	ldr	r3, [r5, #0]
 8000cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fcbf 	bl	8000648 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cca:	4d84      	ldr	r5, [pc, #528]	; (8000edc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000ccc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cce:	682b      	ldr	r3, [r5, #0]
 8000cd0:	039f      	lsls	r7, r3, #14
 8000cd2:	d4c8      	bmi.n	8000c66 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fcb8 	bl	8000648 <HAL_GetTick>
 8000cd8:	1b80      	subs	r0, r0, r6
 8000cda:	2864      	cmp	r0, #100	; 0x64
 8000cdc:	d9f7      	bls.n	8000cce <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000cde:	2003      	movs	r0, #3
}
 8000ce0:	b002      	add	sp, #8
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce6:	b99b      	cbnz	r3, 8000d10 <HAL_RCC_OscConfig+0xbc>
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cee:	602b      	str	r3, [r5, #0]
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fca6 	bl	8000648 <HAL_GetTick>
 8000cfc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfe:	682b      	ldr	r3, [r5, #0]
 8000d00:	0398      	lsls	r0, r3, #14
 8000d02:	d5b0      	bpl.n	8000c66 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d04:	f7ff fca0 	bl	8000648 <HAL_GetTick>
 8000d08:	1b80      	subs	r0, r0, r6
 8000d0a:	2864      	cmp	r0, #100	; 0x64
 8000d0c:	d9f7      	bls.n	8000cfe <HAL_RCC_OscConfig+0xaa>
 8000d0e:	e7e6      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	d103      	bne.n	8000d20 <HAL_RCC_OscConfig+0xcc>
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1c:	602b      	str	r3, [r5, #0]
 8000d1e:	e7ce      	b.n	8000cbe <HAL_RCC_OscConfig+0x6a>
 8000d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d24:	602b      	str	r3, [r5, #0]
 8000d26:	682b      	ldr	r3, [r5, #0]
 8000d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2c:	e7ca      	b.n	8000cc4 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d2e:	4b6b      	ldr	r3, [pc, #428]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	f012 0f0c 	tst.w	r2, #12
 8000d36:	d007      	beq.n	8000d48 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	f002 020c 	and.w	r2, r2, #12
 8000d3e:	2a08      	cmp	r2, #8
 8000d40:	d111      	bne.n	8000d66 <HAL_RCC_OscConfig+0x112>
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	0259      	lsls	r1, r3, #9
 8000d46:	d40e      	bmi.n	8000d66 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d48:	4b64      	ldr	r3, [pc, #400]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	0792      	lsls	r2, r2, #30
 8000d4e:	d502      	bpl.n	8000d56 <HAL_RCC_OscConfig+0x102>
 8000d50:	68e2      	ldr	r2, [r4, #12]
 8000d52:	2a01      	cmp	r2, #1
 8000d54:	d182      	bne.n	8000c5c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	6921      	ldr	r1, [r4, #16]
 8000d5a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d5e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000d62:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d64:	e782      	b.n	8000c6c <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d66:	68e3      	ldr	r3, [r4, #12]
 8000d68:	4d5c      	ldr	r5, [pc, #368]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000d6a:	b1bb      	cbz	r3, 8000d9c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000d6c:	682b      	ldr	r3, [r5, #0]
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d74:	f7ff fc68 	bl	8000648 <HAL_GetTick>
 8000d78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	079f      	lsls	r7, r3, #30
 8000d7e:	d507      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	682b      	ldr	r3, [r5, #0]
 8000d82:	6922      	ldr	r2, [r4, #16]
 8000d84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d8c:	602b      	str	r3, [r5, #0]
 8000d8e:	e76d      	b.n	8000c6c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc5a 	bl	8000648 <HAL_GetTick>
 8000d94:	1b80      	subs	r0, r0, r6
 8000d96:	2802      	cmp	r0, #2
 8000d98:	d9ef      	bls.n	8000d7a <HAL_RCC_OscConfig+0x126>
 8000d9a:	e7a0      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000d9c:	682b      	ldr	r3, [r5, #0]
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000da4:	f7ff fc50 	bl	8000648 <HAL_GetTick>
 8000da8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	682b      	ldr	r3, [r5, #0]
 8000dac:	0798      	lsls	r0, r3, #30
 8000dae:	f57f af5d 	bpl.w	8000c6c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db2:	f7ff fc49 	bl	8000648 <HAL_GetTick>
 8000db6:	1b80      	subs	r0, r0, r6
 8000db8:	2802      	cmp	r0, #2
 8000dba:	d9f6      	bls.n	8000daa <HAL_RCC_OscConfig+0x156>
 8000dbc:	e78f      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000dbe:	6963      	ldr	r3, [r4, #20]
 8000dc0:	4d46      	ldr	r5, [pc, #280]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000dc2:	b183      	cbz	r3, 8000de6 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000dc4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fc3c 	bl	8000648 <HAL_GetTick>
 8000dd0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dd4:	079b      	lsls	r3, r3, #30
 8000dd6:	f53f af4d 	bmi.w	8000c74 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dda:	f7ff fc35 	bl	8000648 <HAL_GetTick>
 8000dde:	1b80      	subs	r0, r0, r6
 8000de0:	2802      	cmp	r0, #2
 8000de2:	d9f6      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x17e>
 8000de4:	e77b      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000de6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000dee:	f7ff fc2b 	bl	8000648 <HAL_GetTick>
 8000df2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000df6:	079f      	lsls	r7, r3, #30
 8000df8:	f57f af3c 	bpl.w	8000c74 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fc24 	bl	8000648 <HAL_GetTick>
 8000e00:	1b80      	subs	r0, r0, r6
 8000e02:	2802      	cmp	r0, #2
 8000e04:	d9f6      	bls.n	8000df4 <HAL_RCC_OscConfig+0x1a0>
 8000e06:	e76a      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e0c:	00d0      	lsls	r0, r2, #3
 8000e0e:	d427      	bmi.n	8000e60 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000e12:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e24:	4d2e      	ldr	r5, [pc, #184]	; (8000ee0 <HAL_RCC_OscConfig+0x28c>)
 8000e26:	682b      	ldr	r3, [r5, #0]
 8000e28:	05d9      	lsls	r1, r3, #23
 8000e2a:	d51b      	bpl.n	8000e64 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2c:	68a3      	ldr	r3, [r4, #8]
 8000e2e:	4d2b      	ldr	r5, [pc, #172]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d127      	bne.n	8000e84 <HAL_RCC_OscConfig+0x230>
 8000e34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e3c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e40:	f7ff fc02 	bl	8000648 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e44:	4f25      	ldr	r7, [pc, #148]	; (8000edc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000e46:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e4a:	079b      	lsls	r3, r3, #30
 8000e4c:	d53f      	bpl.n	8000ece <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	f43f af14 	beq.w	8000c7c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e54:	4a21      	ldr	r2, [pc, #132]	; (8000edc <HAL_RCC_OscConfig+0x288>)
 8000e56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	e70d      	b.n	8000c7c <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8000e60:	2600      	movs	r6, #0
 8000e62:	e7df      	b.n	8000e24 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e6c:	f7ff fbec 	bl	8000648 <HAL_GetTick>
 8000e70:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e72:	682b      	ldr	r3, [r5, #0]
 8000e74:	05da      	lsls	r2, r3, #23
 8000e76:	d4d9      	bmi.n	8000e2c <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e78:	f7ff fbe6 	bl	8000648 <HAL_GetTick>
 8000e7c:	1bc0      	subs	r0, r0, r7
 8000e7e:	2864      	cmp	r0, #100	; 0x64
 8000e80:	d9f7      	bls.n	8000e72 <HAL_RCC_OscConfig+0x21e>
 8000e82:	e72c      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e84:	b9ab      	cbnz	r3, 8000eb2 <HAL_RCC_OscConfig+0x25e>
 8000e86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e88:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	672b      	str	r3, [r5, #112]	; 0x70
 8000e92:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fbd5 	bl	8000648 <HAL_GetTick>
 8000e9e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ea2:	0798      	lsls	r0, r3, #30
 8000ea4:	d5d3      	bpl.n	8000e4e <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea6:	f7ff fbcf 	bl	8000648 <HAL_GetTick>
 8000eaa:	1bc0      	subs	r0, r0, r7
 8000eac:	4540      	cmp	r0, r8
 8000eae:	d9f7      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x24c>
 8000eb0:	e715      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eb6:	d103      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x26c>
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	672b      	str	r3, [r5, #112]	; 0x70
 8000ebe:	e7b9      	b.n	8000e34 <HAL_RCC_OscConfig+0x1e0>
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	672b      	str	r3, [r5, #112]	; 0x70
 8000ec6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ec8:	f023 0304 	bic.w	r3, r3, #4
 8000ecc:	e7b5      	b.n	8000e3a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ece:	f7ff fbbb 	bl	8000648 <HAL_GetTick>
 8000ed2:	eba0 0008 	sub.w	r0, r0, r8
 8000ed6:	42a8      	cmp	r0, r5
 8000ed8:	d9b6      	bls.n	8000e48 <HAL_RCC_OscConfig+0x1f4>
 8000eda:	e700      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee4:	4d38      	ldr	r5, [pc, #224]	; (8000fc8 <HAL_RCC_OscConfig+0x374>)
 8000ee6:	68ab      	ldr	r3, [r5, #8]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d041      	beq.n	8000f74 <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8000ef0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ef8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000efa:	d12e      	bne.n	8000f5a <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000efc:	f7ff fba4 	bl	8000648 <HAL_GetTick>
 8000f00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f02:	682b      	ldr	r3, [r5, #0]
 8000f04:	0199      	lsls	r1, r3, #6
 8000f06:	d422      	bmi.n	8000f4e <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f08:	6a22      	ldr	r2, [r4, #32]
 8000f0a:	69e3      	ldr	r3, [r4, #28]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f20:	4c29      	ldr	r4, [pc, #164]	; (8000fc8 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f22:	0852      	lsrs	r2, r2, #1
 8000f24:	3a01      	subs	r2, #1
 8000f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f2a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f34:	f7ff fb88 	bl	8000648 <HAL_GetTick>
 8000f38:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	019a      	lsls	r2, r3, #6
 8000f3e:	f53f aea1 	bmi.w	8000c84 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f42:	f7ff fb81 	bl	8000648 <HAL_GetTick>
 8000f46:	1b40      	subs	r0, r0, r5
 8000f48:	2802      	cmp	r0, #2
 8000f4a:	d9f6      	bls.n	8000f3a <HAL_RCC_OscConfig+0x2e6>
 8000f4c:	e6c7      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f4e:	f7ff fb7b 	bl	8000648 <HAL_GetTick>
 8000f52:	1b80      	subs	r0, r0, r6
 8000f54:	2802      	cmp	r0, #2
 8000f56:	d9d4      	bls.n	8000f02 <HAL_RCC_OscConfig+0x2ae>
 8000f58:	e6c1      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fb75 	bl	8000648 <HAL_GetTick>
 8000f5e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	019b      	lsls	r3, r3, #6
 8000f64:	f57f ae8e 	bpl.w	8000c84 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f68:	f7ff fb6e 	bl	8000648 <HAL_GetTick>
 8000f6c:	1b00      	subs	r0, r0, r4
 8000f6e:	2802      	cmp	r0, #2
 8000f70:	d9f6      	bls.n	8000f60 <HAL_RCC_OscConfig+0x30c>
 8000f72:	e6b4      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f74:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8000f76:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f78:	f43f aeb2 	beq.w	8000ce0 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f80:	69e1      	ldr	r1, [r4, #28]
 8000f82:	428a      	cmp	r2, r1
 8000f84:	f47f ae6a 	bne.w	8000c5c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f8c:	6a21      	ldr	r1, [r4, #32]
 8000f8e:	428a      	cmp	r2, r1
 8000f90:	f47f ae64 	bne.w	8000c5c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f94:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f98:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000fa0:	f47f ae5c 	bne.w	8000c5c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000fa4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fa6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000faa:	0852      	lsrs	r2, r2, #1
 8000fac:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fae:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000fb2:	f47f ae53 	bne.w	8000c5c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fb8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000fbc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8000fc0:	bf14      	ite	ne
 8000fc2:	2001      	movne	r0, #1
 8000fc4:	2000      	moveq	r0, #0
 8000fc6:	e68b      	b.n	8000ce0 <HAL_RCC_OscConfig+0x8c>
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fcc:	4913      	ldr	r1, [pc, #76]	; (800101c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000fce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fd0:	688b      	ldr	r3, [r1, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d003      	beq.n	8000fe2 <HAL_RCC_GetSysClockFreq+0x16>
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d003      	beq.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fe0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000fe2:	4810      	ldr	r0, [pc, #64]	; (8001024 <HAL_RCC_GetSysClockFreq+0x58>)
 8000fe4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fe6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000fe8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fea:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000ff0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ff8:	bf1a      	itte	ne
 8000ffa:	480a      	ldrne	r0, [pc, #40]	; (8001024 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ffc:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ffe:	4808      	ldreq	r0, [pc, #32]	; (8001020 <HAL_RCC_GetSysClockFreq+0x54>)
 8001000:	fba1 0100 	umull	r0, r1, r1, r0
 8001004:	f7ff f95c 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_RCC_GetSysClockFreq+0x50>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001010:	3301      	adds	r3, #1
 8001012:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001014:	fbb0 f0f3 	udiv	r0, r0, r3
 8001018:	bd08      	pop	{r3, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	00f42400 	.word	0x00f42400
 8001024:	017d7840 	.word	0x017d7840

08001028 <HAL_RCC_ClockConfig>:
{
 8001028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800102c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800102e:	4604      	mov	r4, r0
 8001030:	b910      	cbnz	r0, 8001038 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001032:	2001      	movs	r0, #1
 8001034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001038:	4a46      	ldr	r2, [pc, #280]	; (8001154 <HAL_RCC_ClockConfig+0x12c>)
 800103a:	6813      	ldr	r3, [r2, #0]
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	428b      	cmp	r3, r1
 8001042:	d329      	bcc.n	8001098 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001044:	6821      	ldr	r1, [r4, #0]
 8001046:	078f      	lsls	r7, r1, #30
 8001048:	d431      	bmi.n	80010ae <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800104a:	07c8      	lsls	r0, r1, #31
 800104c:	d444      	bmi.n	80010d8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800104e:	4a41      	ldr	r2, [pc, #260]	; (8001154 <HAL_RCC_ClockConfig+0x12c>)
 8001050:	6813      	ldr	r3, [r2, #0]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	429d      	cmp	r5, r3
 8001058:	d368      	bcc.n	800112c <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105a:	6822      	ldr	r2, [r4, #0]
 800105c:	0751      	lsls	r1, r2, #29
 800105e:	d471      	bmi.n	8001144 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001060:	0713      	lsls	r3, r2, #28
 8001062:	d507      	bpl.n	8001074 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001064:	4a3c      	ldr	r2, [pc, #240]	; (8001158 <HAL_RCC_ClockConfig+0x130>)
 8001066:	6921      	ldr	r1, [r4, #16]
 8001068:	6893      	ldr	r3, [r2, #8]
 800106a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800106e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001072:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001074:	f7ff ffaa 	bl	8000fcc <HAL_RCC_GetSysClockFreq>
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <HAL_RCC_ClockConfig+0x130>)
 800107a:	4a38      	ldr	r2, [pc, #224]	; (800115c <HAL_RCC_ClockConfig+0x134>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	40d8      	lsrs	r0, r3
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <HAL_RCC_ClockConfig+0x138>)
 8001088:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_RCC_ClockConfig+0x13c>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	f7ff fa9f 	bl	80005d0 <HAL_InitTick>
  return HAL_OK;
 8001092:	2000      	movs	r0, #0
 8001094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	f023 030f 	bic.w	r3, r3, #15
 800109e:	430b      	orrs	r3, r1
 80010a0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a2:	6813      	ldr	r3, [r2, #0]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	4299      	cmp	r1, r3
 80010aa:	d1c2      	bne.n	8001032 <HAL_RCC_ClockConfig+0xa>
 80010ac:	e7ca      	b.n	8001044 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ae:	f011 0f04 	tst.w	r1, #4
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <HAL_RCC_ClockConfig+0x130>)
 80010b4:	d003      	beq.n	80010be <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80010bc:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010be:	070e      	lsls	r6, r1, #28
 80010c0:	d503      	bpl.n	80010ca <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80010c8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	68a0      	ldr	r0, [r4, #8]
 80010ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010d2:	4302      	orrs	r2, r0
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	e7b8      	b.n	800104a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d8:	6861      	ldr	r1, [r4, #4]
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_RCC_ClockConfig+0x130>)
 80010dc:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e0:	d11c      	bne.n	800111c <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e6:	d0a4      	beq.n	8001032 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e8:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ea:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ee:	4e1a      	ldr	r6, [pc, #104]	; (8001158 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010f0:	f022 0203 	bic.w	r2, r2, #3
 80010f4:	430a      	orrs	r2, r1
 80010f6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80010f8:	f7ff faa6 	bl	8000648 <HAL_GetTick>
 80010fc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	68b3      	ldr	r3, [r6, #8]
 8001100:	6862      	ldr	r2, [r4, #4]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800110a:	d0a0      	beq.n	800104e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110c:	f7ff fa9c 	bl	8000648 <HAL_GetTick>
 8001110:	1bc0      	subs	r0, r0, r7
 8001112:	4540      	cmp	r0, r8
 8001114:	d9f3      	bls.n	80010fe <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8001116:	2003      	movs	r0, #3
}
 8001118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800111c:	2902      	cmp	r1, #2
 800111e:	d102      	bne.n	8001126 <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001120:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001124:	e7df      	b.n	80010e6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	f012 0f02 	tst.w	r2, #2
 800112a:	e7dc      	b.n	80010e6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112c:	6813      	ldr	r3, [r2, #0]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	432b      	orrs	r3, r5
 8001134:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001136:	6813      	ldr	r3, [r2, #0]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	429d      	cmp	r5, r3
 800113e:	f47f af78 	bne.w	8001032 <HAL_RCC_ClockConfig+0xa>
 8001142:	e78a      	b.n	800105a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001144:	4904      	ldr	r1, [pc, #16]	; (8001158 <HAL_RCC_ClockConfig+0x130>)
 8001146:	68e0      	ldr	r0, [r4, #12]
 8001148:	688b      	ldr	r3, [r1, #8]
 800114a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800114e:	4303      	orrs	r3, r0
 8001150:	608b      	str	r3, [r1, #8]
 8001152:	e785      	b.n	8001060 <HAL_RCC_ClockConfig+0x38>
 8001154:	40023c00 	.word	0x40023c00
 8001158:	40023800 	.word	0x40023800
 800115c:	08002f0e 	.word	0x08002f0e
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_RCC_GetPCLK1Freq+0x14>)
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <HAL_RCC_GetPCLK1Freq+0x18>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001172:	5cd3      	ldrb	r3, [r2, r3]
 8001174:	4a03      	ldr	r2, [pc, #12]	; (8001184 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001176:	6810      	ldr	r0, [r2, #0]
}
 8001178:	40d8      	lsrs	r0, r3
 800117a:	4770      	bx	lr
 800117c:	40023800 	.word	0x40023800
 8001180:	08002f1e 	.word	0x08002f1e
 8001184:	20000008 	.word	0x20000008

08001188 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_RCC_GetPCLK2Freq+0x14>)
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001196:	6810      	ldr	r0, [r2, #0]
}
 8001198:	40d8      	lsrs	r0, r3
 800119a:	4770      	bx	lr
 800119c:	40023800 	.word	0x40023800
 80011a0:	08002f1e 	.word	0x08002f1e
 80011a4:	20000008 	.word	0x20000008

080011a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011ac:	6802      	ldr	r2, [r0, #0]
{
 80011ae:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011b0:	f012 0601 	ands.w	r6, r2, #1
 80011b4:	d00b      	beq.n	80011ce <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80011b6:	4bb8      	ldr	r3, [pc, #736]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011b8:	6899      	ldr	r1, [r3, #8]
 80011ba:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80011be:	6099      	str	r1, [r3, #8]
 80011c0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80011c2:	6899      	ldr	r1, [r3, #8]
 80011c4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80011c6:	fab6 f686 	clz	r6, r6
 80011ca:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80011cc:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80011ce:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80011d2:	d012      	beq.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011d4:	49b0      	ldr	r1, [pc, #704]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011d6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80011d8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80011dc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80011e4:	bf08      	it	eq
 80011e6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011e8:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80011ec:	bf16      	itet	ne
 80011ee:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80011f2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80011f4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80011fa:	02d1      	lsls	r1, r2, #11
 80011fc:	d510      	bpl.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011fe:	48a6      	ldr	r0, [pc, #664]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001200:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001202:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001206:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800120a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800120e:	ea43 0301 	orr.w	r3, r3, r1
 8001212:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001216:	f000 8185 	beq.w	8001524 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800121a:	2900      	cmp	r1, #0
 800121c:	bf08      	it	eq
 800121e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001220:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001224:	bf18      	it	ne
 8001226:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001228:	0692      	lsls	r2, r2, #26
 800122a:	d531      	bpl.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800122e:	4f9b      	ldr	r7, [pc, #620]	; (800149c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001232:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800124a:	f7ff f9fd 	bl	8000648 <HAL_GetTick>
 800124e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	f140 8168 	bpl.w	8001528 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001258:	4f8f      	ldr	r7, [pc, #572]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800125a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800125c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001260:	f040 816d 	bne.w	800153e <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001264:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001266:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800126a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800126e:	4a8a      	ldr	r2, [pc, #552]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001270:	f040 818b 	bne.w	800158a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8001274:	6891      	ldr	r1, [r2, #8]
 8001276:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800127a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800127e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001282:	4301      	orrs	r1, r0
 8001284:	6091      	str	r1, [r2, #8]
 8001286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800128c:	430b      	orrs	r3, r1
 800128e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	06da      	lsls	r2, r3, #27
 8001294:	d50c      	bpl.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001296:	4a80      	ldr	r2, [pc, #512]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001298:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800129c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80012a0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80012a4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80012a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012aa:	4301      	orrs	r1, r0
 80012ac:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012b0:	045f      	lsls	r7, r3, #17
 80012b2:	d508      	bpl.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012b4:	4978      	ldr	r1, [pc, #480]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012b6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80012b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012c0:	4302      	orrs	r2, r0
 80012c2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80012c6:	0418      	lsls	r0, r3, #16
 80012c8:	d508      	bpl.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80012ca:	4973      	ldr	r1, [pc, #460]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012cc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80012ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012d2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80012d6:	4302      	orrs	r2, r0
 80012d8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80012dc:	03d9      	lsls	r1, r3, #15
 80012de:	d508      	bpl.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80012e0:	496d      	ldr	r1, [pc, #436]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012e2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80012e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80012ec:	4302      	orrs	r2, r0
 80012ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80012f2:	039a      	lsls	r2, r3, #14
 80012f4:	d508      	bpl.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80012f6:	4968      	ldr	r1, [pc, #416]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80012fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012fe:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001302:	4302      	orrs	r2, r0
 8001304:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001308:	065f      	lsls	r7, r3, #25
 800130a:	d508      	bpl.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800130c:	4962      	ldr	r1, [pc, #392]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800130e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001310:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001314:	f022 0203 	bic.w	r2, r2, #3
 8001318:	4302      	orrs	r2, r0
 800131a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800131e:	0618      	lsls	r0, r3, #24
 8001320:	d508      	bpl.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001322:	495d      	ldr	r1, [pc, #372]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001324:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001326:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800132a:	f022 020c 	bic.w	r2, r2, #12
 800132e:	4302      	orrs	r2, r0
 8001330:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001334:	05d9      	lsls	r1, r3, #23
 8001336:	d508      	bpl.n	800134a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001338:	4957      	ldr	r1, [pc, #348]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800133a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800133c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001340:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001344:	4302      	orrs	r2, r0
 8001346:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800134a:	059a      	lsls	r2, r3, #22
 800134c:	d508      	bpl.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800134e:	4952      	ldr	r1, [pc, #328]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001350:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001352:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001356:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800135a:	4302      	orrs	r2, r0
 800135c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001360:	055f      	lsls	r7, r3, #21
 8001362:	d508      	bpl.n	8001376 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001364:	494c      	ldr	r1, [pc, #304]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001366:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001368:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800136c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001370:	4302      	orrs	r2, r0
 8001372:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001376:	0518      	lsls	r0, r3, #20
 8001378:	d508      	bpl.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800137a:	4947      	ldr	r1, [pc, #284]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800137c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800137e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001382:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001386:	4302      	orrs	r2, r0
 8001388:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800138c:	04d9      	lsls	r1, r3, #19
 800138e:	d508      	bpl.n	80013a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001390:	4941      	ldr	r1, [pc, #260]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001392:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001394:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001398:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800139c:	4302      	orrs	r2, r0
 800139e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80013a2:	049a      	lsls	r2, r3, #18
 80013a4:	d508      	bpl.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80013a6:	493c      	ldr	r1, [pc, #240]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013a8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80013aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013ae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80013b2:	4302      	orrs	r2, r0
 80013b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80013b8:	025f      	lsls	r7, r3, #9
 80013ba:	d508      	bpl.n	80013ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80013bc:	4936      	ldr	r1, [pc, #216]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013be:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80013c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013c4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80013c8:	4302      	orrs	r2, r0
 80013ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80013ce:	0298      	lsls	r0, r3, #10
 80013d0:	d50c      	bpl.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013d2:	4831      	ldr	r0, [pc, #196]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013d4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80013d6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80013da:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013de:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80013e2:	bf08      	it	eq
 80013e4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013e6:	430a      	orrs	r2, r1
 80013e8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80013ec:	f013 0f08 	tst.w	r3, #8
 80013f0:	bf18      	it	ne
 80013f2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80013f4:	0359      	lsls	r1, r3, #13
 80013f6:	d508      	bpl.n	800140a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80013f8:	4927      	ldr	r1, [pc, #156]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013fa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80013fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001400:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001404:	4302      	orrs	r2, r0
 8001406:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800140a:	021a      	lsls	r2, r3, #8
 800140c:	d509      	bpl.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800140e:	4922      	ldr	r1, [pc, #136]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001410:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001414:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001418:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800141c:	4302      	orrs	r2, r0
 800141e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001422:	2e01      	cmp	r6, #1
 8001424:	f000 80b5 	beq.w	8001592 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800142c:	f000 80b1 	beq.w	8001592 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001430:	2d01      	cmp	r5, #1
 8001432:	d175      	bne.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001434:	4d18      	ldr	r5, [pc, #96]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800143e:	f7ff f903 	bl	8000648 <HAL_GetTick>
 8001442:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001444:	682b      	ldr	r3, [r5, #0]
 8001446:	009f      	lsls	r7, r3, #2
 8001448:	f100 8127 	bmi.w	800169a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800144c:	6821      	ldr	r1, [r4, #0]
 800144e:	030e      	lsls	r6, r1, #12
 8001450:	d501      	bpl.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8001452:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001454:	b11b      	cbz	r3, 800145e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8001456:	02cd      	lsls	r5, r1, #11
 8001458:	d522      	bpl.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800145a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800145c:	bb03      	cbnz	r3, 80014a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001460:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001464:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001470:	4303      	orrs	r3, r0
 8001472:	6960      	ldr	r0, [r4, #20]
 8001474:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001478:	69a0      	ldr	r0, [r4, #24]
 800147a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800147e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001482:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001486:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001488:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800148c:	3801      	subs	r0, #1
 800148e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001492:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001496:	e003      	b.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80014a0:	0288      	lsls	r0, r1, #10
 80014a2:	d515      	bpl.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80014a4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80014a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014aa:	d111      	bne.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80014ac:	4a82      	ldr	r2, [pc, #520]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80014ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80014b2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80014b6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80014ba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014be:	4303      	orrs	r3, r0
 80014c0:	6960      	ldr	r0, [r4, #20]
 80014c2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014c6:	6a20      	ldr	r0, [r4, #32]
 80014c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80014d0:	070a      	lsls	r2, r1, #28
 80014d2:	d519      	bpl.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80014d4:	4978      	ldr	r1, [pc, #480]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80014d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80014da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80014de:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80014e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e6:	4313      	orrs	r3, r2
 80014e8:	6962      	ldr	r2, [r4, #20]
 80014ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014ee:	69e2      	ldr	r2, [r4, #28]
 80014f0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80014f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80014f8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80014fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001502:	4313      	orrs	r3, r2
 8001504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001508:	4c6b      	ldr	r4, [pc, #428]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001512:	f7ff f899 	bl	8000648 <HAL_GetTick>
 8001516:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f140 80c4 	bpl.w	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001520:	2000      	movs	r0, #0
 8001522:	e009      	b.n	8001538 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8001524:	2601      	movs	r6, #1
 8001526:	e67b      	b.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001528:	f7ff f88e 	bl	8000648 <HAL_GetTick>
 800152c:	eba0 0008 	sub.w	r0, r0, r8
 8001530:	2864      	cmp	r0, #100	; 0x64
 8001532:	f67f ae8d 	bls.w	8001250 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001536:	2003      	movs	r0, #3
}
 8001538:	b003      	add	sp, #12
 800153a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800153e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001540:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001544:	4293      	cmp	r3, r2
 8001546:	f43f ae8d 	beq.w	8001264 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800154a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800154c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800154e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001552:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001556:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001558:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800155a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800155e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001560:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001564:	07d8      	lsls	r0, r3, #31
 8001566:	f57f ae7d 	bpl.w	8001264 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800156a:	f7ff f86d 	bl	8000648 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001572:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001576:	0799      	lsls	r1, r3, #30
 8001578:	f53f ae74 	bmi.w	8001264 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff f864 	bl	8000648 <HAL_GetTick>
 8001580:	eba0 0008 	sub.w	r0, r0, r8
 8001584:	4548      	cmp	r0, r9
 8001586:	d9f5      	bls.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8001588:	e7d5      	b.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800158a:	6891      	ldr	r1, [r2, #8]
 800158c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001590:	e678      	b.n	8001284 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001592:	4e49      	ldr	r6, [pc, #292]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001594:	6833      	ldr	r3, [r6, #0]
 8001596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800159a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800159c:	f7ff f854 	bl	8000648 <HAL_GetTick>
 80015a0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80015a2:	6833      	ldr	r3, [r6, #0]
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	d472      	bmi.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80015a8:	6822      	ldr	r2, [r4, #0]
 80015aa:	07d7      	lsls	r7, r2, #31
 80015ac:	d512      	bpl.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80015ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015b0:	b983      	cbnz	r3, 80015d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80015b2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80015b6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80015ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015be:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80015c2:	430b      	orrs	r3, r1
 80015c4:	6861      	ldr	r1, [r4, #4]
 80015c6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80015ca:	68a1      	ldr	r1, [r4, #8]
 80015cc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80015d0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80015d4:	0316      	lsls	r6, r2, #12
 80015d6:	d503      	bpl.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 80015d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015de:	d005      	beq.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x444>
 80015e0:	02d0      	lsls	r0, r2, #11
 80015e2:	d51e      	bpl.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80015e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ea:	d11a      	bne.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80015ec:	4932      	ldr	r1, [pc, #200]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80015ee:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80015f2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80015f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80015fe:	4303      	orrs	r3, r0
 8001600:	6860      	ldr	r0, [r4, #4]
 8001602:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001606:	68e0      	ldr	r0, [r4, #12]
 8001608:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800160c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001610:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001616:	f020 001f 	bic.w	r0, r0, #31
 800161a:	3b01      	subs	r3, #1
 800161c:	4303      	orrs	r3, r0
 800161e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001622:	01d1      	lsls	r1, r2, #7
 8001624:	d511      	bpl.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001626:	4924      	ldr	r1, [pc, #144]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001628:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800162c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001630:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001634:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001638:	4303      	orrs	r3, r0
 800163a:	6860      	ldr	r0, [r4, #4]
 800163c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001640:	6920      	ldr	r0, [r4, #16]
 8001642:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800164a:	0192      	lsls	r2, r2, #6
 800164c:	d50d      	bpl.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800164e:	6923      	ldr	r3, [r4, #16]
 8001650:	6862      	ldr	r2, [r4, #4]
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001658:	68e2      	ldr	r2, [r4, #12]
 800165a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800165e:	68a2      	ldr	r2, [r4, #8]
 8001660:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001666:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800166a:	4e13      	ldr	r6, [pc, #76]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800166c:	6833      	ldr	r3, [r6, #0]
 800166e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001672:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001674:	f7fe ffe8 	bl	8000648 <HAL_GetTick>
 8001678:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800167a:	6833      	ldr	r3, [r6, #0]
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	f53f aed7 	bmi.w	8001430 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001682:	f7fe ffe1 	bl	8000648 <HAL_GetTick>
 8001686:	1bc0      	subs	r0, r0, r7
 8001688:	2864      	cmp	r0, #100	; 0x64
 800168a:	d9f6      	bls.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800168c:	e753      	b.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800168e:	f7fe ffdb 	bl	8000648 <HAL_GetTick>
 8001692:	1bc0      	subs	r0, r0, r7
 8001694:	2864      	cmp	r0, #100	; 0x64
 8001696:	d984      	bls.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8001698:	e74d      	b.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800169a:	f7fe ffd5 	bl	8000648 <HAL_GetTick>
 800169e:	1b80      	subs	r0, r0, r6
 80016a0:	2864      	cmp	r0, #100	; 0x64
 80016a2:	f67f aecf 	bls.w	8001444 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80016a6:	e746      	b.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80016a8:	f7fe ffce 	bl	8000648 <HAL_GetTick>
 80016ac:	1b40      	subs	r0, r0, r5
 80016ae:	2864      	cmp	r0, #100	; 0x64
 80016b0:	f67f af32 	bls.w	8001518 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80016b4:	e73f      	b.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80016c0:	4604      	mov	r4, r0
 80016c2:	b1c8      	cbz	r0, 80016f8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80016c4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80016c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016cc:	b91b      	cbnz	r3, 80016d6 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80016ce:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80016d2:	f000 fee7 	bl	80024a4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80016d6:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80016d8:	1d21      	adds	r1, r4, #4
 80016da:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80016dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80016e0:	f000 faa6 	bl	8001c30 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80016e4:	6862      	ldr	r2, [r4, #4]
 80016e6:	4629      	mov	r1, r5
 80016e8:	6820      	ldr	r0, [r4, #0]
 80016ea:	f000 fae0 	bl	8001cae <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80016ee:	2301      	movs	r3, #1
  
  return HAL_OK;
 80016f0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80016f2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
}
 80016fa:	bd38      	pop	{r3, r4, r5, pc}

080016fc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001700:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 8001704:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001706:	b2c0      	uxtb	r0, r0
 8001708:	2802      	cmp	r0, #2
 800170a:	d00d      	beq.n	8001728 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800170c:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800170e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001710:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001714:	f000 fb13 	bl	8001d3e <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001718:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800171a:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800171c:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800171e:	bf0c      	ite	eq
 8001720:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001722:	2301      	movne	r3, #1
 8001724:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001728:	bd38      	pop	{r3, r4, r5, pc}
	...

0800172c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800172c:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800172e:	69c2      	ldr	r2, [r0, #28]
{
 8001730:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001732:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001734:	6881      	ldr	r1, [r0, #8]
 8001736:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001738:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800173a:	4301      	orrs	r1, r0
 800173c:	6960      	ldr	r0, [r4, #20]
 800173e:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001740:	4890      	ldr	r0, [pc, #576]	; (8001984 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001742:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001744:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001746:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001748:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800174a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800174c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001754:	4301      	orrs	r1, r0
 8001756:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001758:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800175a:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800175c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800175e:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001762:	4301      	orrs	r1, r0
 8001764:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001766:	4988      	ldr	r1, [pc, #544]	; (8001988 <UART_SetConfig+0x25c>)
 8001768:	428b      	cmp	r3, r1
 800176a:	d117      	bne.n	800179c <UART_SetConfig+0x70>
 800176c:	4b87      	ldr	r3, [pc, #540]	; (800198c <UART_SetConfig+0x260>)
 800176e:	4988      	ldr	r1, [pc, #544]	; (8001990 <UART_SetConfig+0x264>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001774:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001778:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800177c:	5ccb      	ldrb	r3, [r1, r3]
 800177e:	d129      	bne.n	80017d4 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001780:	2b08      	cmp	r3, #8
 8001782:	f200 809d 	bhi.w	80018c0 <UART_SetConfig+0x194>
 8001786:	e8df f013 	tbh	[pc, r3, lsl #1]
 800178a:	008c      	.short	0x008c
 800178c:	00ee00e8 	.word	0x00ee00e8
 8001790:	00fa009b 	.word	0x00fa009b
 8001794:	009b009b 	.word	0x009b009b
 8001798:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800179c:	497d      	ldr	r1, [pc, #500]	; (8001994 <UART_SetConfig+0x268>)
 800179e:	428b      	cmp	r3, r1
 80017a0:	d106      	bne.n	80017b0 <UART_SetConfig+0x84>
 80017a2:	4b7a      	ldr	r3, [pc, #488]	; (800198c <UART_SetConfig+0x260>)
 80017a4:	497c      	ldr	r1, [pc, #496]	; (8001998 <UART_SetConfig+0x26c>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	e7e3      	b.n	8001778 <UART_SetConfig+0x4c>
 80017b0:	497a      	ldr	r1, [pc, #488]	; (800199c <UART_SetConfig+0x270>)
 80017b2:	428b      	cmp	r3, r1
 80017b4:	d11d      	bne.n	80017f2 <UART_SetConfig+0xc6>
 80017b6:	4b75      	ldr	r3, [pc, #468]	; (800198c <UART_SetConfig+0x260>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	f000 80d9 	beq.w	8001978 <UART_SetConfig+0x24c>
 80017c6:	d80e      	bhi.n	80017e6 <UART_SetConfig+0xba>
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d067      	beq.n	800189c <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80017d0:	d076      	beq.n	80018c0 <UART_SetConfig+0x194>
 80017d2:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d873      	bhi.n	80018c0 <UART_SetConfig+0x194>
 80017d8:	e8df f003 	tbb	[pc, r3]
 80017dc:	72a29f99 	.word	0x72a29f99
 80017e0:	727272b4 	.word	0x727272b4
 80017e4:	b7          	.byte	0xb7
 80017e5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	f000 80ba 	beq.w	8001960 <UART_SetConfig+0x234>
 80017ec:	2b30      	cmp	r3, #48	; 0x30
 80017ee:	d03f      	beq.n	8001870 <UART_SetConfig+0x144>
 80017f0:	e7ec      	b.n	80017cc <UART_SetConfig+0xa0>
 80017f2:	496b      	ldr	r1, [pc, #428]	; (80019a0 <UART_SetConfig+0x274>)
 80017f4:	428b      	cmp	r3, r1
 80017f6:	d10d      	bne.n	8001814 <UART_SetConfig+0xe8>
 80017f8:	4b64      	ldr	r3, [pc, #400]	; (800198c <UART_SetConfig+0x260>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001802:	2b40      	cmp	r3, #64	; 0x40
 8001804:	f000 80b8 	beq.w	8001978 <UART_SetConfig+0x24c>
 8001808:	d9de      	bls.n	80017c8 <UART_SetConfig+0x9c>
 800180a:	2b80      	cmp	r3, #128	; 0x80
 800180c:	f000 80a8 	beq.w	8001960 <UART_SetConfig+0x234>
 8001810:	2bc0      	cmp	r3, #192	; 0xc0
 8001812:	e7ec      	b.n	80017ee <UART_SetConfig+0xc2>
 8001814:	4963      	ldr	r1, [pc, #396]	; (80019a4 <UART_SetConfig+0x278>)
 8001816:	428b      	cmp	r3, r1
 8001818:	d110      	bne.n	800183c <UART_SetConfig+0x110>
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <UART_SetConfig+0x260>)
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001828:	f000 80a6 	beq.w	8001978 <UART_SetConfig+0x24c>
 800182c:	d9cc      	bls.n	80017c8 <UART_SetConfig+0x9c>
 800182e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001832:	f000 8095 	beq.w	8001960 <UART_SetConfig+0x234>
 8001836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800183a:	e7d8      	b.n	80017ee <UART_SetConfig+0xc2>
 800183c:	495a      	ldr	r1, [pc, #360]	; (80019a8 <UART_SetConfig+0x27c>)
 800183e:	428b      	cmp	r3, r1
 8001840:	d11e      	bne.n	8001880 <UART_SetConfig+0x154>
 8001842:	4b52      	ldr	r3, [pc, #328]	; (800198c <UART_SetConfig+0x260>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800184c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001850:	f000 8092 	beq.w	8001978 <UART_SetConfig+0x24c>
 8001854:	d806      	bhi.n	8001864 <UART_SetConfig+0x138>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d07c      	beq.n	8001954 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800185a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800185e:	d12f      	bne.n	80018c0 <UART_SetConfig+0x194>
 8001860:	2310      	movs	r3, #16
 8001862:	e78d      	b.n	8001780 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001868:	d07a      	beq.n	8001960 <UART_SetConfig+0x234>
 800186a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800186e:	d1f4      	bne.n	800185a <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001870:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001874:	d169      	bne.n	800194a <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001876:	6863      	ldr	r3, [r4, #4]
 8001878:	0858      	lsrs	r0, r3, #1
 800187a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800187e:	e078      	b.n	8001972 <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001880:	494a      	ldr	r1, [pc, #296]	; (80019ac <UART_SetConfig+0x280>)
 8001882:	428b      	cmp	r3, r1
 8001884:	d124      	bne.n	80018d0 <UART_SetConfig+0x1a4>
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <UART_SetConfig+0x260>)
 8001888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001894:	d070      	beq.n	8001978 <UART_SetConfig+0x24c>
 8001896:	d815      	bhi.n	80018c4 <UART_SetConfig+0x198>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1de      	bne.n	800185a <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800189c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80018a0:	d135      	bne.n	800190e <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80018a2:	f7ff fc61 	bl	8001168 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80018a6:	6862      	ldr	r2, [r4, #4]
 80018a8:	0853      	lsrs	r3, r2, #1
 80018aa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80018ae:	fbb0 f0f2 	udiv	r0, r0, r2
 80018b2:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018b4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80018b8:	f1a0 0210 	sub.w	r2, r0, #16
 80018bc:	429a      	cmp	r2, r3
 80018be:	d91a      	bls.n	80018f6 <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 80018c0:	2001      	movs	r0, #1
 80018c2:	e020      	b.n	8001906 <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018c8:	d04a      	beq.n	8001960 <UART_SetConfig+0x234>
 80018ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80018ce:	e7ce      	b.n	800186e <UART_SetConfig+0x142>
 80018d0:	4937      	ldr	r1, [pc, #220]	; (80019b0 <UART_SetConfig+0x284>)
 80018d2:	428b      	cmp	r3, r1
 80018d4:	d1f4      	bne.n	80018c0 <UART_SetConfig+0x194>
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <UART_SetConfig+0x260>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018e4:	d048      	beq.n	8001978 <UART_SetConfig+0x24c>
 80018e6:	f67f af6f 	bls.w	80017c8 <UART_SetConfig+0x9c>
 80018ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018ee:	d037      	beq.n	8001960 <UART_SetConfig+0x234>
 80018f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80018f4:	e77b      	b.n	80017ee <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80018f6:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018fa:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 80018fe:	6822      	ldr	r2, [r4, #0]
 8001900:	4318      	orrs	r0, r3
 8001902:	60d0      	str	r0, [r2, #12]
 8001904:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001906:	2300      	movs	r3, #0
 8001908:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800190a:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800190c:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800190e:	f7ff fc2b 	bl	8001168 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001912:	6863      	ldr	r3, [r4, #4]
 8001914:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001918:	e008      	b.n	800192c <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 800191a:	f7ff fc35 	bl	8001188 <HAL_RCC_GetPCLK2Freq>
 800191e:	e7f8      	b.n	8001912 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001920:	6863      	ldr	r3, [r4, #4]
 8001922:	0858      	lsrs	r0, r3, #1
 8001924:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001928:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800192c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001930:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001932:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001936:	f1a0 0210 	sub.w	r2, r0, #16
 800193a:	429a      	cmp	r2, r3
 800193c:	d8c0      	bhi.n	80018c0 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	60d8      	str	r0, [r3, #12]
 8001942:	e7df      	b.n	8001904 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001944:	f7ff fb42 	bl	8000fcc <HAL_RCC_GetSysClockFreq>
 8001948:	e7e3      	b.n	8001912 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800194a:	6863      	ldr	r3, [r4, #4]
 800194c:	0858      	lsrs	r0, r3, #1
 800194e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001952:	e7eb      	b.n	800192c <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001954:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001958:	d1df      	bne.n	800191a <UART_SetConfig+0x1ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 800195a:	f7ff fc15 	bl	8001188 <HAL_RCC_GetPCLK2Freq>
 800195e:	e7a2      	b.n	80018a6 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001960:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001964:	d1dc      	bne.n	8001920 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001966:	6863      	ldr	r3, [r4, #4]
 8001968:	0858      	lsrs	r0, r3, #1
 800196a:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 800196e:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001972:	fbb0 f0f3 	udiv	r0, r0, r3
 8001976:	e79c      	b.n	80018b2 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001978:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800197c:	d1e2      	bne.n	8001944 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 800197e:	f7ff fb25 	bl	8000fcc <HAL_RCC_GetSysClockFreq>
 8001982:	e790      	b.n	80018a6 <UART_SetConfig+0x17a>
 8001984:	efff69f3 	.word	0xefff69f3
 8001988:	40011000 	.word	0x40011000
 800198c:	40023800 	.word	0x40023800
 8001990:	08002eec 	.word	0x08002eec
 8001994:	40004400 	.word	0x40004400
 8001998:	08002ef0 	.word	0x08002ef0
 800199c:	40004800 	.word	0x40004800
 80019a0:	40004c00 	.word	0x40004c00
 80019a4:	40005000 	.word	0x40005000
 80019a8:	40011400 	.word	0x40011400
 80019ac:	40007800 	.word	0x40007800
 80019b0:	40007c00 	.word	0x40007c00

080019b4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019b6:	07da      	lsls	r2, r3, #31
{
 80019b8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019ba:	d506      	bpl.n	80019ca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019bc:	6801      	ldr	r1, [r0, #0]
 80019be:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80019c0:	684a      	ldr	r2, [r1, #4]
 80019c2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80019c6:	4322      	orrs	r2, r4
 80019c8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019ca:	079c      	lsls	r4, r3, #30
 80019cc:	d506      	bpl.n	80019dc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019ce:	6801      	ldr	r1, [r0, #0]
 80019d0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80019d2:	684a      	ldr	r2, [r1, #4]
 80019d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019d8:	4322      	orrs	r2, r4
 80019da:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019dc:	0759      	lsls	r1, r3, #29
 80019de:	d506      	bpl.n	80019ee <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019e0:	6801      	ldr	r1, [r0, #0]
 80019e2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80019e4:	684a      	ldr	r2, [r1, #4]
 80019e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019ea:	4322      	orrs	r2, r4
 80019ec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019ee:	071a      	lsls	r2, r3, #28
 80019f0:	d506      	bpl.n	8001a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80019f2:	6801      	ldr	r1, [r0, #0]
 80019f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80019f6:	684a      	ldr	r2, [r1, #4]
 80019f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019fc:	4322      	orrs	r2, r4
 80019fe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a00:	06dc      	lsls	r4, r3, #27
 8001a02:	d506      	bpl.n	8001a12 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a04:	6801      	ldr	r1, [r0, #0]
 8001a06:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a08:	688a      	ldr	r2, [r1, #8]
 8001a0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a0e:	4322      	orrs	r2, r4
 8001a10:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a12:	0699      	lsls	r1, r3, #26
 8001a14:	d506      	bpl.n	8001a24 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a16:	6801      	ldr	r1, [r0, #0]
 8001a18:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001a1a:	688a      	ldr	r2, [r1, #8]
 8001a1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a20:	4322      	orrs	r2, r4
 8001a22:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a24:	065a      	lsls	r2, r3, #25
 8001a26:	d510      	bpl.n	8001a4a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a28:	6801      	ldr	r1, [r0, #0]
 8001a2a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001a2c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a2e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a32:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001a36:	ea42 0204 	orr.w	r2, r2, r4
 8001a3a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a3c:	d105      	bne.n	8001a4a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a3e:	684a      	ldr	r2, [r1, #4]
 8001a40:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a42:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001a46:	4322      	orrs	r2, r4
 8001a48:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	d506      	bpl.n	8001a5c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a4e:	6802      	ldr	r2, [r0, #0]
 8001a50:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a52:	6853      	ldr	r3, [r2, #4]
 8001a54:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	6053      	str	r3, [r2, #4]
 8001a5c:	bd10      	pop	{r4, pc}

08001a5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a62:	9d06      	ldr	r5, [sp, #24]
 8001a64:	4604      	mov	r4, r0
 8001a66:	460f      	mov	r7, r1
 8001a68:	4616      	mov	r6, r2
 8001a6a:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a6c:	6821      	ldr	r1, [r4, #0]
 8001a6e:	69ca      	ldr	r2, [r1, #28]
 8001a70:	ea37 0302 	bics.w	r3, r7, r2
 8001a74:	bf0c      	ite	eq
 8001a76:	2201      	moveq	r2, #1
 8001a78:	2200      	movne	r2, #0
 8001a7a:	42b2      	cmp	r2, r6
 8001a7c:	d002      	beq.n	8001a84 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001a7e:	2000      	movs	r0, #0
}
 8001a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a84:	1c68      	adds	r0, r5, #1
 8001a86:	d0f2      	beq.n	8001a6e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a88:	f7fe fdde 	bl	8000648 <HAL_GetTick>
 8001a8c:	eba0 0008 	sub.w	r0, r0, r8
 8001a90:	4285      	cmp	r5, r0
 8001a92:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a94:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a96:	d300      	bcc.n	8001a9a <UART_WaitOnFlagUntilTimeout+0x3c>
 8001a98:	b97d      	cbnz	r5, 8001aba <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a9e:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aa0:	6883      	ldr	r3, [r0, #8]
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001aac:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001aae:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001ab0:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001ab2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8001ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001aba:	075a      	lsls	r2, r3, #29
 8001abc:	d5d6      	bpl.n	8001a6c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001abe:	69c3      	ldr	r3, [r0, #28]
 8001ac0:	051b      	lsls	r3, r3, #20
 8001ac2:	d5d3      	bpl.n	8001a6c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ac8:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001aca:	6803      	ldr	r3, [r0, #0]
 8001acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ad0:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ad2:	6883      	ldr	r3, [r0, #8]
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001ada:	2320      	movs	r3, #32
 8001adc:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001ade:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001ae0:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001ae2:	e7e4      	b.n	8001aae <UART_WaitOnFlagUntilTimeout+0x50>

08001ae4 <HAL_UART_Transmit>:
{
 8001ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ae8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001aea:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001aec:	4604      	mov	r4, r0
 8001aee:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001af0:	2b20      	cmp	r3, #32
{
 8001af2:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001af4:	d14c      	bne.n	8001b90 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8001af6:	2900      	cmp	r1, #0
 8001af8:	d048      	beq.n	8001b8c <HAL_UART_Transmit+0xa8>
 8001afa:	2a00      	cmp	r2, #0
 8001afc:	d046      	beq.n	8001b8c <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001afe:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d044      	beq.n	8001b90 <HAL_UART_Transmit+0xac>
 8001b06:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b08:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001b0a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b0e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b10:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b12:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001b14:	f7fe fd98 	bl	8000648 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b18:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001b1a:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001b1c:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001b24:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b28:	d103      	bne.n	8001b32 <HAL_UART_Transmit+0x4e>
 8001b2a:	6923      	ldr	r3, [r4, #16]
 8001b2c:	b90b      	cbnz	r3, 8001b32 <HAL_UART_Transmit+0x4e>
 8001b2e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001b30:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8001b32:	2300      	movs	r3, #0
 8001b34:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8001b38:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8001b42:	b292      	uxth	r2, r2
 8001b44:	b93a      	cbnz	r2, 8001b56 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff ff88 	bl	8001a5e <UART_WaitOnFlagUntilTimeout>
 8001b4e:	b940      	cbnz	r0, 8001b62 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8001b50:	2320      	movs	r3, #32
 8001b52:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001b54:	e006      	b.n	8001b64 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b56:	2200      	movs	r2, #0
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff ff7f 	bl	8001a5e <UART_WaitOnFlagUntilTimeout>
 8001b60:	b118      	cbz	r0, 8001b6a <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8001b62:	2003      	movs	r0, #3
}
 8001b64:	b003      	add	sp, #12
 8001b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b6a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001b6c:	b95e      	cbnz	r6, 8001b86 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b6e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b76:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001b78:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001b84:	e7d8      	b.n	8001b38 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b86:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001b8a:	e7f4      	b.n	8001b76 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	e7e9      	b.n	8001b64 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001b90:	2002      	movs	r0, #2
 8001b92:	e7e7      	b.n	8001b64 <HAL_UART_Transmit+0x80>

08001b94 <UART_CheckIdleState>:
{
 8001b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	2500      	movs	r5, #0
{
 8001b98:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9a:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001b9c:	f7fe fd54 	bl	8000648 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ba0:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001ba2:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	0712      	lsls	r2, r2, #28
 8001ba8:	d407      	bmi.n	8001bba <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8001baa:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001bac:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001bae:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001bb0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001bb4:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8001bb6:	b003      	add	sp, #12
 8001bb8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bba:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	462a      	mov	r2, r5
 8001bc8:	f7ff ff49 	bl	8001a5e <UART_WaitOnFlagUntilTimeout>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d0ec      	beq.n	8001baa <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	e7f0      	b.n	8001bb6 <UART_CheckIdleState+0x22>

08001bd4 <HAL_UART_Init>:
{
 8001bd4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	b340      	cbz	r0, 8001c2c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001bda:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001bdc:	b91b      	cbnz	r3, 8001be6 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001bde:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001be2:	f000 fc15 	bl	8002410 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001be6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001be8:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bea:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001bec:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001bee:	6813      	ldr	r3, [r2, #0]
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bf6:	f7ff fd99 	bl	800172c <UART_SetConfig>
 8001bfa:	2801      	cmp	r0, #1
 8001bfc:	d016      	beq.n	8001c2c <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c00:	b113      	cbz	r3, 8001c08 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7ff fed6 	bl	80019b4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c08:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001c0a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c1a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
}
 8001c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001c26:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001c28:	f7ff bfb4 	b.w	8001b94 <UART_CheckIdleState>
}
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	bd10      	pop	{r4, pc}

08001c30 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8001c30:	680b      	ldr	r3, [r1, #0]
 8001c32:	684a      	ldr	r2, [r1, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8001c3a:	6803      	ldr	r3, [r0, #0]
{
 8001c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c40:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8001c44:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001c48:	694d      	ldr	r5, [r1, #20]
 8001c4a:	698c      	ldr	r4, [r1, #24]
 8001c4c:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8001c50:	6a0f      	ldr	r7, [r1, #32]
 8001c52:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8001c54:	d014      	beq.n	8001c80 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001c56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	ea42 0209 	orr.w	r2, r2, r9
 8001c64:	ea42 0208 	orr.w	r2, r2, r8
 8001c68:	ea42 030c 	orr.w	r3, r2, ip
 8001c6c:	432b      	orrs	r3, r5
 8001c6e:	4323      	orrs	r3, r4
 8001c70:	ea43 030e 	orr.w	r3, r3, lr
 8001c74:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001c76:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001c78:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8001c80:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8001c82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001c86:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8001c8a:	ea43 030e 	orr.w	r3, r3, lr
 8001c8e:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001c92:	433b      	orrs	r3, r7
 8001c94:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8001c96:	431e      	orrs	r6, r3
 8001c98:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001c9c:	6006      	str	r6, [r0, #0]
 8001c9e:	ea42 0208 	orr.w	r2, r2, r8
 8001ca2:	ea42 030c 	orr.w	r3, r2, ip
 8001ca6:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001ca8:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8001caa:	6043      	str	r3, [r0, #4]
 8001cac:	e7e5      	b.n	8001c7a <FMC_SDRAM_Init+0x4a>

08001cae <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8001cae:	2a01      	cmp	r2, #1
 8001cb0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 8001cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb6:	e891 4008 	ldmia.w	r1, {r3, lr}
 8001cba:	688f      	ldr	r7, [r1, #8]
 8001cbc:	690d      	ldr	r5, [r1, #16]
 8001cbe:	694e      	ldr	r6, [r1, #20]
 8001cc0:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8001cc2:	d01b      	beq.n	8001cfc <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8001cc4:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8001cc6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001cca:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8001ccc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8001cd0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8001cd4:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 8001cd6:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 8001cd8:	3901      	subs	r1, #1
 8001cda:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8001cde:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8001ce0:	1e7b      	subs	r3, r7, #1
 8001ce2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001ce6:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8001cea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001cee:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001cf2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8001cf6:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8001cfc:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8001cfe:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8001d02:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001d04:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8001d06:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8001d0a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8001d0e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 8001d12:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8001d14:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 8001d18:	3901      	subs	r1, #1
 8001d1a:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8001d1e:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 8001d22:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8001d24:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8001d26:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 8001d2a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8001d2e:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8001d30:	6086      	str	r6, [r0, #8]
 8001d32:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001d36:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8001d3a:	60c3      	str	r3, [r0, #12]
 8001d3c:	e7dc      	b.n	8001cf8 <FMC_SDRAM_Timing_Init+0x4a>

08001d3e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001d3e:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 8001d42:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001d44:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 8001d46:	68ca      	ldr	r2, [r1, #12]
{
 8001d48:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8001d4a:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001d4c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8001d50:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 8001d52:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8001d54:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001d56:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8001d5a:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8001d5c:	9b01      	ldr	r3, [sp, #4]
 8001d5e:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8001d60:	b002      	add	sp, #8
 8001d62:	bd10      	pop	{r4, pc}

08001d64 <MT48LC4M32B2_Init>:

FMC_SDRAM_CommandTypeDef command;
HAL_StatusTypeDef hal_stat;

void MT48LC4M32B2_Init(SDRAM_HandleTypeDef *hsdram)
	{
 8001d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

	 // Вкл тактирование, обращение именно к 1 банку памяти, одно автообновление (1-16)

	    __IO uint32_t tmpmrd =0;
	    command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001d68:	4c29      	ldr	r4, [pc, #164]	; (8001e10 <MT48LC4M32B2_Init+0xac>)
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001d6a:	2501      	movs	r5, #1
	    __IO uint32_t tmpmrd =0;
 8001d6c:	f04f 0900 	mov.w	r9, #0
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001d70:	f04f 0810 	mov.w	r8, #16
	    command.AutoRefreshNumber = 1;
	    command.ModeRegisterDefinition = 0;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001d74:	4f27      	ldr	r7, [pc, #156]	; (8001e14 <MT48LC4M32B2_Init+0xb0>)
 8001d76:	4621      	mov	r1, r4
 8001d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
	{
 8001d7c:	4606      	mov	r6, r0
	    __IO uint32_t tmpmrd =0;
 8001d7e:	f8cd 9004 	str.w	r9, [sp, #4]
	    command.AutoRefreshNumber = 1;
 8001d82:	60a5      	str	r5, [r4, #8]
	    command.ModeRegisterDefinition = 0;
 8001d84:	f8c4 900c 	str.w	r9, [r4, #12]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001d88:	e884 0120 	stmia.w	r4, {r5, r8}
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001d8c:	f7ff fcb6 	bl	80016fc <HAL_SDRAM_SendCommand>
 8001d90:	7038      	strb	r0, [r7, #0]
	    HAL_Delay(1);
 8001d92:	4628      	mov	r0, r5
 8001d94:	f7fe fc5e 	bl	8000654 <HAL_Delay>

	// Деактивируем все банки памяти перед регенерацией

	    command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001d98:	2302      	movs	r3, #2
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	    command.AutoRefreshNumber = 1;
	    command.ModeRegisterDefinition = 0;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da0:	4630      	mov	r0, r6
	    command.AutoRefreshNumber = 1;
 8001da2:	60a5      	str	r5, [r4, #8]
	    command.ModeRegisterDefinition = 0;
 8001da4:	f8c4 900c 	str.w	r9, [r4, #12]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001da8:	e884 0108 	stmia.w	r4, {r3, r8}
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001dac:	f7ff fca6 	bl	80016fc <HAL_SDRAM_SendCommand>
 8001db0:	7038      	strb	r0, [r7, #0]
	    HAL_Delay(1);
 8001db2:	4628      	mov	r0, r5
 8001db4:	f7fe fc4e 	bl	8000654 <HAL_Delay>

	// Задаём нормальный режим автогенерации

	    command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001db8:	2303      	movs	r3, #3
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	    command.AutoRefreshNumber = 8;
	    command.ModeRegisterDefinition = 0;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001dba:	4621      	mov	r1, r4
 8001dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dc0:	4630      	mov	r0, r6
	    command.ModeRegisterDefinition = 0;
 8001dc2:	f8c4 900c 	str.w	r9, [r4, #12]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001dc6:	e884 0108 	stmia.w	r4, {r3, r8}
	    command.AutoRefreshNumber = 8;
 8001dca:	2308      	movs	r3, #8
 8001dcc:	60a3      	str	r3, [r4, #8]
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001dce:	f7ff fc95 	bl	80016fc <HAL_SDRAM_SendCommand>
 8001dd2:	7038      	strb	r0, [r7, #0]
	    HAL_Delay(1);
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	f7fe fc3d 	bl	8000654 <HAL_Delay>

	// Включаем размер пакета, последовательный режим передачи,
	// латентность 2 такта, стандартный режим, одиночный режим записи пакета

	    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001dda:	f44f 7308 	mov.w	r3, #544	; 0x220
	                      SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	    command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	    command.AutoRefreshNumber = 1;
	    command.ModeRegisterDefinition = tmpmrd;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de2:	4621      	mov	r1, r4
	    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001de4:	9301      	str	r3, [sp, #4]
	    command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001de6:	2304      	movs	r3, #4
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001de8:	4630      	mov	r0, r6
	    command.AutoRefreshNumber = 1;
 8001dea:	60a5      	str	r5, [r4, #8]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001dec:	e884 0108 	stmia.w	r4, {r3, r8}
	    command.ModeRegisterDefinition = tmpmrd;
 8001df0:	9b01      	ldr	r3, [sp, #4]
 8001df2:	60e3      	str	r3, [r4, #12]
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001df4:	f7ff fc82 	bl	80016fc <HAL_SDRAM_SendCommand>

	    /* (15.62 us x Freq) — 20 */
	    /* Set the device refresh counter */
	    hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
 8001df8:	6832      	ldr	r2, [r6, #0]
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8001dfa:	7038      	strb	r0, [r7, #0]
	    hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
 8001dfc:	6953      	ldr	r3, [r2, #20]
 8001dfe:	f443 6321 	orr.w	r3, r3, #2576	; 0xa10
 8001e02:	f043 0308 	orr.w	r3, r3, #8
 8001e06:	6153      	str	r3, [r2, #20]
	}
 8001e08:	b003      	add	sp, #12
 8001e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e0e:	bf00      	nop
 8001e10:	200000a4 	.word	0x200000a4
 8001e14:	200000b4 	.word	0x200000b4

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b570      	push	{r4, r5, r6, lr}
 8001e1a:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1c:	2230      	movs	r2, #48	; 0x30
 8001e1e:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e20:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e22:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e24:	2601      	movs	r6, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e26:	f000 fc2f 	bl	8002688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2a:	2214      	movs	r2, #20
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	a802      	add	r0, sp, #8
 8001e30:	f000 fc2a 	bl	8002688 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e34:	2100      	movs	r1, #0
 8001e36:	2284      	movs	r2, #132	; 0x84
 8001e38:	a813      	add	r0, sp, #76	; 0x4c
 8001e3a:	f000 fc25 	bl	8002688 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <SystemClock_Config+0xb4>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e40:	a807      	add	r0, sp, #28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e42:	2500      	movs	r5, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <SystemClock_Config+0xb8>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e62:	9607      	str	r6, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e68:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e6a:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e74:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e76:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e7c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e7e:	2319      	movs	r3, #25
 8001e80:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001e82:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e86:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e88:	f7fe fee4 	bl	8000c54 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e8c:	f7fe feaa 	bl	8000be4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e90:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001e92:	2106      	movs	r1, #6
 8001e94:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e96:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e9e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ea6:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001ea8:	f7ff f8be 	bl	8001028 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 8001eac:	2348      	movs	r3, #72	; 0x48
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eae:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001eb0:	941a      	str	r4, [sp, #104]	; 0x68
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 8001eb2:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001eb4:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001eb6:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001eb8:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001eba:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001ebc:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001ebe:	951e      	str	r5, [sp, #120]	; 0x78
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ec0:	9524      	str	r5, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec2:	f7ff f971 	bl	80011a8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001ec6:	b034      	add	sp, #208	; 0xd0
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <main>:
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b0aa      	sub	sp, #168	; 0xa8
  char str1[20]={0};
 8001ed8:	2214      	movs	r2, #20
 8001eda:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001edc:	2400      	movs	r4, #0
  char str1[20]={0};
 8001ede:	a80b      	add	r0, sp, #44	; 0x2c
 8001ee0:	f000 fbd2 	bl	8002688 <memset>
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	a81d      	add	r0, sp, #116	; 0x74
 8001eea:	f000 fbcd 	bl	8002688 <memset>
  HAL_MPU_Disable();
 8001eee:	f7fe fc23 	bl	8000738 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x20010000;
 8001ef2:	4ab6      	ldr	r2, [pc, #728]	; (80021cc <main+0x2f8>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ef4:	2301      	movs	r3, #1
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ef6:	a81d      	add	r0, sp, #116	; 0x74
  MPU_InitStruct.BaseAddress = 0x20010000;
 8001ef8:	921e      	str	r2, [sp, #120]	; 0x78
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001efa:	2211      	movs	r2, #17
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001efc:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001f00:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001f04:	2203      	movs	r2, #3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001f06:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001f0a:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001f0e:	f88d 4075 	strb.w	r4, [sp, #117]	; 0x75
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001f12:	f88d 407d 	strb.w	r4, [sp, #125]	; 0x7d
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001f16:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f1a:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001f1e:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f22:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f26:	f7fe fc29 	bl	800077c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f2a:	2004      	movs	r0, #4
 8001f2c:	f7fe fc14 	bl	8000758 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f34:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001f38:	4ba5      	ldr	r3, [pc, #660]	; (80021d0 <main+0x2fc>)
 8001f3a:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f42:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f4c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f52:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001f56:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f5a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001f5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f62:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f66:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001f6a:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8001f6e:	07a5      	lsls	r5, r4, #30
 8001f70:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f72:	ea02 0e06 	and.w	lr, r2, r6
 8001f76:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f78:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f7a:	ea40 070e 	orr.w	r7, r0, lr
      } while (ways-- != 0U);
 8001f7e:	3901      	subs	r1, #1
 8001f80:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f84:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8001f88:	1c4f      	adds	r7, r1, #1
 8001f8a:	d1f6      	bne.n	8001f7a <main+0xa6>
 8001f8c:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8001f8e:	f112 0f20 	cmn.w	r2, #32
 8001f92:	d1ee      	bne.n	8001f72 <main+0x9e>
 8001f94:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fa4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001fa8:	f7fe fb36 	bl	8000618 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2400      	movs	r4, #0
  SystemClock_Config();
 8001fae:	f7ff ff33 	bl	8001e18 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb2:	2214      	movs	r2, #20
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	a81d      	add	r0, sp, #116	; 0x74
 8001fb8:	f000 fb66 	bl	8002688 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fbc:	4b85      	ldr	r3, [pc, #532]	; (80021d4 <main+0x300>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fbe:	2502      	movs	r5, #2
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8001fc0:	2102      	movs	r1, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc4:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8001fc8:	4883      	ldr	r0, [pc, #524]	; (80021d8 <main+0x304>)
  hltdc.Init.AccumulatedVBP = 5;
 8001fca:	2705      	movs	r7, #5
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fcc:	f042 0210 	orr.w	r2, r2, #16
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001fd0:	4e82      	ldr	r6, [pc, #520]	; (80021dc <main+0x308>)
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001fd2:	f44f 6980 	mov.w	r9, #1024	; 0x400
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	f002 0210 	and.w	r2, r2, #16
 8001fde:	9200      	str	r2, [sp, #0]
 8001fe0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	f042 0202 	orr.w	r2, r2, #2
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8001fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fec:	f002 0202 	and.w	r2, r2, #2
 8001ff0:	9201      	str	r2, [sp, #4]
 8001ff2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffe:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002002:	9202      	str	r2, [sp, #8]
 8002004:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
 800200e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002010:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002014:	9203      	str	r2, [sp, #12]
 8002016:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201a:	f042 0208 	orr.w	r2, r2, #8
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
 8002020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002022:	f002 0208 	and.w	r2, r2, #8
 8002026:	9204      	str	r2, [sp, #16]
 8002028:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800202a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
 8002032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002034:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002038:	9205      	str	r2, [sp, #20]
 800203a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800203c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800203e:	f042 0220 	orr.w	r2, r2, #32
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
 8002044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002046:	f002 0220 	and.w	r2, r2, #32
 800204a:	9206      	str	r2, [sp, #24]
 800204c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002050:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
 8002056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002058:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800205c:	9207      	str	r2, [sp, #28]
 800205e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
 8002068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800206e:	9208      	str	r2, [sp, #32]
 8002070:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
 800207a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207c:	f002 0201 	and.w	r2, r2, #1
 8002080:	9209      	str	r2, [sp, #36]	; 0x24
 8002082:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002086:	f042 0204 	orr.w	r2, r2, #4
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	930a      	str	r3, [sp, #40]	; 0x28
 8002096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8002098:	f7fe fc82 	bl	80009a0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800209c:	a91d      	add	r1, sp, #116	; 0x74
 800209e:	484e      	ldr	r0, [pc, #312]	; (80021d8 <main+0x304>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020a0:	951d      	str	r5, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a2:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	941f      	str	r4, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	9420      	str	r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020aa:	f7fe fb8f 	bl	80007cc <HAL_GPIO_Init>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020ae:	221c      	movs	r2, #28
 80020b0:	4621      	mov	r1, r4
 80020b2:	a81d      	add	r0, sp, #116	; 0x74
 80020b4:	f000 fae8 	bl	8002688 <memset>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80020b8:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <main+0x30c>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80020ba:	2204      	movs	r2, #4
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80020bc:	a91d      	add	r1, sp, #116	; 0x74
 80020be:	4630      	mov	r0, r6
  SdramTiming.LoadToActiveDelay = 2;
 80020c0:	951d      	str	r5, [sp, #116]	; 0x74
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80020c2:	60f2      	str	r2, [r6, #12]
  SdramTiming.SelfRefreshTime = 4;
 80020c4:	921f      	str	r2, [sp, #124]	; 0x7c
  SdramTiming.WriteRecoveryTime = 2;
 80020c6:	9521      	str	r5, [sp, #132]	; 0x84
  SdramTiming.RPDelay = 2;
 80020c8:	9522      	str	r5, [sp, #136]	; 0x88
  SdramTiming.RCDDelay = 2;
 80020ca:	9523      	str	r5, [sp, #140]	; 0x8c
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80020cc:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80020ce:	6174      	str	r4, [r6, #20]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80020d0:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80020d2:	62b4      	str	r4, [r6, #40]	; 0x28
  hltdc.Instance = LTDC;
 80020d4:	4d43      	ldr	r5, [pc, #268]	; (80021e4 <main+0x310>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80020d6:	e886 0018 	stmia.w	r6, {r3, r4}
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80020da:	2310      	movs	r3, #16
 80020dc:	6133      	str	r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80020de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e2:	61b3      	str	r3, [r6, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80020e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020e8:	6233      	str	r3, [r6, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	6273      	str	r3, [r6, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 6;
 80020f0:	2306      	movs	r3, #6
 80020f2:	931e      	str	r3, [sp, #120]	; 0x78
  SdramTiming.RowCycleDelay = 6;
 80020f4:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80020f6:	f7ff fae1 	bl	80016bc <HAL_SDRAM_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80020fa:	2234      	movs	r2, #52	; 0x34
 80020fc:	4621      	mov	r1, r4
 80020fe:	a810      	add	r0, sp, #64	; 0x40
 8002100:	f000 fac2 	bl	8002688 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002104:	2234      	movs	r2, #52	; 0x34
 8002106:	4621      	mov	r1, r4
 8002108:	a81d      	add	r0, sp, #116	; 0x74
 800210a:	f000 fabd 	bl	8002688 <memset>
  hltdc.Instance = LTDC;
 800210e:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <main+0x314>)
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002110:	4628      	mov	r0, r5
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002112:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002114:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002116:	612c      	str	r4, [r5, #16]
  hltdc.Init.AccumulatedVBP = 5;
 8002118:	622f      	str	r7, [r5, #32]
  hltdc.Init.Backcolor.Blue = 0;
 800211a:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800211e:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002122:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002126:	e885 0018 	stmia.w	r5, {r3, r4}
  hltdc.Init.HorizontalSync = 7;
 800212a:	2307      	movs	r3, #7
 800212c:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 3;
 800212e:	2303      	movs	r3, #3
 8002130:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002132:	230e      	movs	r3, #14
 8002134:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedActiveW = 654;
 8002136:	f240 238e 	movw	r3, #654	; 0x28e
 800213a:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800213c:	f240 13e5 	movw	r3, #485	; 0x1e5
 8002140:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8002142:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002146:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002148:	f240 13e7 	movw	r3, #487	; 0x1e7
 800214c:	632b      	str	r3, [r5, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800214e:	f7fe fcb3 	bl	8000ab8 <HAL_LTDC_Init>
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002152:	4622      	mov	r2, r4
 8002154:	a910      	add	r1, sp, #64	; 0x40
 8002156:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8002158:	9410      	str	r4, [sp, #64]	; 0x40
  pLayerCfg.WindowX1 = 0;
 800215a:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.WindowY0 = 0;
 800215c:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.WindowY1 = 0;
 800215e:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002160:	9414      	str	r4, [sp, #80]	; 0x50
  pLayerCfg.Alpha = 0;
 8002162:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.Alpha0 = 0;
 8002164:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002166:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800216a:	9718      	str	r7, [sp, #96]	; 0x60
  pLayerCfg.FBStartAdress = 0;
 800216c:	9419      	str	r4, [sp, #100]	; 0x64
  pLayerCfg.ImageWidth = 0;
 800216e:	941a      	str	r4, [sp, #104]	; 0x68
  pLayerCfg.ImageHeight = 0;
 8002170:	941b      	str	r4, [sp, #108]	; 0x6c
  pLayerCfg.Backcolor.Blue = 0;
 8002172:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
  pLayerCfg.Backcolor.Green = 0;
 8002176:	f88d 4071 	strb.w	r4, [sp, #113]	; 0x71
  pLayerCfg.Backcolor.Red = 0;
 800217a:	f88d 4072 	strb.w	r4, [sp, #114]	; 0x72
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800217e:	f7fe fd07 	bl	8000b90 <HAL_LTDC_ConfigLayer>
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002182:	a91d      	add	r1, sp, #116	; 0x74
 8002184:	4642      	mov	r2, r8
 8002186:	4628      	mov	r0, r5
  pLayerCfg1.WindowX0 = 0;
 8002188:	941d      	str	r4, [sp, #116]	; 0x74
  pLayerCfg1.WindowX1 = 0;
 800218a:	941e      	str	r4, [sp, #120]	; 0x78
  pLayerCfg1.WindowY0 = 0;
 800218c:	941f      	str	r4, [sp, #124]	; 0x7c
  pLayerCfg1.WindowY1 = 0;
 800218e:	9420      	str	r4, [sp, #128]	; 0x80
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002190:	9421      	str	r4, [sp, #132]	; 0x84
  pLayerCfg1.Alpha = 0;
 8002192:	9422      	str	r4, [sp, #136]	; 0x88
  pLayerCfg1.Alpha0 = 0;
 8002194:	9423      	str	r4, [sp, #140]	; 0x8c
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002196:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800219a:	9725      	str	r7, [sp, #148]	; 0x94
  pLayerCfg1.FBStartAdress = 0;
 800219c:	9426      	str	r4, [sp, #152]	; 0x98
  pLayerCfg1.ImageWidth = 0;
 800219e:	9427      	str	r4, [sp, #156]	; 0x9c
  pLayerCfg1.ImageHeight = 0;
 80021a0:	9428      	str	r4, [sp, #160]	; 0xa0
  pLayerCfg1.Backcolor.Blue = 0;
 80021a2:	f88d 40a4 	strb.w	r4, [sp, #164]	; 0xa4
  pLayerCfg1.Backcolor.Green = 0;
 80021a6:	f88d 40a5 	strb.w	r4, [sp, #165]	; 0xa5
  pLayerCfg1.Backcolor.Red = 0;
 80021aa:	f88d 40a6 	strb.w	r4, [sp, #166]	; 0xa6
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80021ae:	f7fe fcef 	bl	8000b90 <HAL_LTDC_ConfigLayer>
  huart1.Instance = USART1;
 80021b2:	480e      	ldr	r0, [pc, #56]	; (80021ec <main+0x318>)
  huart1.Init.BaudRate = 115200;
 80021b4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <main+0x31c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021bc:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021be:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c0:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c2:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c4:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c6:	6244      	str	r4, [r0, #36]	; 0x24
 80021c8:	e014      	b.n	80021f4 <main+0x320>
 80021ca:	bf00      	nop
 80021cc:	20010000 	.word	0x20010000
 80021d0:	e000ed00 	.word	0xe000ed00
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40022000 	.word	0x40022000
 80021dc:	200005e0 	.word	0x200005e0
 80021e0:	a0000140 	.word	0xa0000140
 80021e4:	200000b8 	.word	0x200000b8
 80021e8:	40016800 	.word	0x40016800
 80021ec:	20000160 	.word	0x20000160
 80021f0:	40011000 	.word	0x40011000
   pBuffer[tmpIndex] = tmpIndex + uwOffset;
 80021f4:	4d2d      	ldr	r5, [pc, #180]	; (80022ac <main+0x3d8>)
  huart1.Init.BaudRate = 115200;
 80021f6:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021fa:	230c      	movs	r3, #12
 80021fc:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021fe:	f7ff fce9 	bl	8001bd4 <HAL_UART_Init>
  MT48LC4M32B2_Init(&hsdram1);
 8002202:	4630      	mov	r0, r6
 8002204:	f7ff fdae 	bl	8001d64 <MT48LC4M32B2_Init>
   pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8002208:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <main+0x3dc>)
  MT48LC4M32B2_Init(&hsdram1);
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <main+0x3e0>)
 for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800220c:	482a      	ldr	r0, [pc, #168]	; (80022b8 <main+0x3e4>)
 800220e:	4611      	mov	r1, r2
   pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8002210:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 8002214:	50a3      	str	r3, [r4, r2]
 8002216:	3301      	adds	r3, #1
 for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8002218:	4283      	cmp	r3, r0
 800221a:	d1f9      	bne.n	8002210 <main+0x33c>
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 800221c:	4c27      	ldr	r4, [pc, #156]	; (80022bc <main+0x3e8>)
 800221e:	2300      	movs	r3, #0
 8002220:	6023      	str	r3, [r4, #0]
 8002222:	6822      	ldr	r2, [r4, #0]
 8002224:	2aff      	cmp	r2, #255	; 0xff
 8002226:	d913      	bls.n	8002250 <main+0x37c>
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8002228:	2300      	movs	r3, #0
      	  aRxBuffer[uwIndex] = *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex);
 800222a:	4925      	ldr	r1, [pc, #148]	; (80022c0 <main+0x3ec>)
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 800222c:	6023      	str	r3, [r4, #0]
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	2bff      	cmp	r3, #255	; 0xff
 8002232:	d918      	bls.n	8002266 <main+0x392>
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8002234:	2300      	movs	r3, #0
	  	  sprintf(str1,"%03ld: 0x%08lXrn",(unsigned long) uwIndex,(unsigned long)aRxBuffer[uwIndex]);
 8002236:	4d22      	ldr	r5, [pc, #136]	; (80022c0 <main+0x3ec>)
 8002238:	4e22      	ldr	r6, [pc, #136]	; (80022c4 <main+0x3f0>)
	  	  HAL_UART_Transmit(&huart1, (uint8_t*)str1,strlen(str1),0x1000);
 800223a:	4f23      	ldr	r7, [pc, #140]	; (80022c8 <main+0x3f4>)
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 800223c:	6023      	str	r3, [r4, #0]
 800223e:	6822      	ldr	r2, [r4, #0]
 8002240:	2aff      	cmp	r2, #255	; 0xff
 8002242:	d91b      	bls.n	800227c <main+0x3a8>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8002244:	2201      	movs	r2, #1
 8002246:	2102      	movs	r1, #2
 8002248:	4820      	ldr	r0, [pc, #128]	; (80022cc <main+0x3f8>)
 800224a:	f7fe fba9 	bl	80009a0 <HAL_GPIO_WritePin>
 800224e:	e7fe      	b.n	800224e <main+0x37a>
	  	  *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR +
 8002250:	f102 5340 	add.w	r3, r2, #805306368	; 0x30000000
	  			  4*uwIndex) = aTxBuffer[uwIndex];
 8002254:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	  	  *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR +
 8002258:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800225c:	009b      	lsls	r3, r3, #2
	  			  4*uwIndex) = aTxBuffer[uwIndex];
 800225e:	601a      	str	r2, [r3, #0]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	e7dc      	b.n	8002220 <main+0x34c>
      	  aRxBuffer[uwIndex] = *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex);
 8002266:	f103 5240 	add.w	r2, r3, #805306368	; 0x30000000
 800226a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8002276:	3301      	adds	r3, #1
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	e7d8      	b.n	800222e <main+0x35a>
	  	  sprintf(str1,"%03ld: 0x%08lXrn",(unsigned long) uwIndex,(unsigned long)aRxBuffer[uwIndex]);
 800227c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8002280:	4631      	mov	r1, r6
 8002282:	a80b      	add	r0, sp, #44	; 0x2c
 8002284:	f000 fa08 	bl	8002698 <siprintf>
	  	  HAL_UART_Transmit(&huart1, (uint8_t*)str1,strlen(str1),0x1000);
 8002288:	a80b      	add	r0, sp, #44	; 0x2c
 800228a:	f7fd ffc1 	bl	8000210 <strlen>
 800228e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002292:	b282      	uxth	r2, r0
 8002294:	a90b      	add	r1, sp, #44	; 0x2c
 8002296:	4638      	mov	r0, r7
 8002298:	f7ff fc24 	bl	8001ae4 <HAL_UART_Transmit>
	  	  HAL_Delay(100);
 800229c:	2064      	movs	r0, #100	; 0x64
 800229e:	f7fe f9d9 	bl	8000654 <HAL_Delay>
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	6023      	str	r3, [r4, #0]
 80022a8:	e7c9      	b.n	800223e <main+0x36a>
 80022aa:	bf00      	nop
 80022ac:	2117c260 	.word	0x2117c260
 80022b0:	20000614 	.word	0x20000614
 80022b4:	37ba0f68 	.word	0x37ba0f68
 80022b8:	37ba1068 	.word	0x37ba1068
 80022bc:	2000008c 	.word	0x2000008c
 80022c0:	200001e0 	.word	0x200001e0
 80022c4:	08002efd 	.word	0x08002efd
 80022c8:	20000160 	.word	0x20000160
 80022cc:	40022000 	.word	0x40022000

080022d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_MspInit+0x2c>)
{
 80022d2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
 80022dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022de:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80022e2:	9200      	str	r2, [sp, #0]
 80022e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f8:	b002      	add	sp, #8
 80022fa:	4770      	bx	lr
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002306:	2214      	movs	r2, #20
 8002308:	2100      	movs	r1, #0
 800230a:	a807      	add	r0, sp, #28
 800230c:	f000 f9bc 	bl	8002688 <memset>
  if(hltdc->Instance==LTDC)
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <HAL_LTDC_MspInit+0xf8>)
 8002314:	429a      	cmp	r2, r3
 8002316:	d16d      	bne.n	80023f4 <HAL_LTDC_MspInit+0xf4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002318:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800231e:	250e      	movs	r5, #14
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002320:	a907      	add	r1, sp, #28
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8 
                          |GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_6 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2 
                          |GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002326:	4835      	ldr	r0, [pc, #212]	; (80023fc <HAL_LTDC_MspInit+0xfc>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002328:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
 800232e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002330:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002334:	9201      	str	r2, [sp, #4]
 8002336:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233a:	f042 0210 	orr.w	r2, r2, #16
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
 8002340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002342:	f002 0210 	and.w	r2, r2, #16
 8002346:	9202      	str	r2, [sp, #8]
 8002348:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
 8002352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002354:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002358:	9203      	str	r2, [sp, #12]
 800235a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800235c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
 8002364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002366:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800236a:	9204      	str	r2, [sp, #16]
 800236c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800236e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002370:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002374:	631a      	str	r2, [r3, #48]	; 0x30
 8002376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002378:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800237c:	9205      	str	r2, [sp, #20]
 800237e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	9306      	str	r3, [sp, #24]
 8002392:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002394:	2310      	movs	r3, #16
 8002396:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002398:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800239a:	f7fe fa17 	bl	80007cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8 
 800239e:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023a2:	a907      	add	r1, sp, #28
 80023a4:	4816      	ldr	r0, [pc, #88]	; (8002400 <HAL_LTDC_MspInit+0x100>)
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8 
 80023a6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023ae:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023b0:	f7fe fa0c 	bl	80007cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 80023b4:	23ff      	movs	r3, #255	; 0xff
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80023b6:	a907      	add	r1, sp, #28
 80023b8:	4812      	ldr	r0, [pc, #72]	; (8002404 <HAL_LTDC_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 80023ba:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023c2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80023c4:	f7fe fa02 	bl	80007cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023cc:	a907      	add	r1, sp, #28
 80023ce:	480e      	ldr	r0, [pc, #56]	; (8002408 <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023d0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023d8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023da:	f7fe f9f7 	bl	80007cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
 80023de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023e2:	a907      	add	r1, sp, #28
 80023e4:	4809      	ldr	r0, [pc, #36]	; (800240c <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
 80023e6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023ee:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023f0:	f7fe f9ec 	bl	80007cc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80023f4:	b00c      	add	sp, #48	; 0x30
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
 80023f8:	40016800 	.word	0x40016800
 80023fc:	40021000 	.word	0x40021000
 8002400:	40022400 	.word	0x40022400
 8002404:	40022800 	.word	0x40022800
 8002408:	40021c00 	.word	0x40021c00
 800240c:	40022000 	.word	0x40022000

08002410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002416:	2214      	movs	r2, #20
 8002418:	2100      	movs	r1, #0
 800241a:	a803      	add	r0, sp, #12
 800241c:	f000 f934 	bl	8002688 <memset>
  if(huart->Instance==USART1)
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_UART_MspInit+0x88>)
 8002424:	429a      	cmp	r2, r3
 8002426:	d134      	bne.n	8002492 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002428:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002430:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8002432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002434:	a903      	add	r1, sp, #12
 8002436:	4819      	ldr	r0, [pc, #100]	; (800249c <HAL_UART_MspInit+0x8c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002438:	f042 0210 	orr.w	r2, r2, #16
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
 800243e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002440:	f002 0210 	and.w	r2, r2, #16
 8002444:	9200      	str	r2, [sp, #0]
 8002446:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244a:	f042 0202 	orr.w	r2, r2, #2
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
 8002450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002452:	f002 0202 	and.w	r2, r2, #2
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800246c:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	9302      	str	r3, [sp, #8]
 8002470:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f7fe f9a9 	bl	80007cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800247a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	a903      	add	r1, sp, #12
 8002480:	4807      	ldr	r0, [pc, #28]	; (80024a0 <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002482:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800248c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f7fe f99d 	bl	80007cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002492:	b008      	add	sp, #32
 8002494:	bd70      	pop	{r4, r5, r6, pc}
 8002496:	bf00      	nop
 8002498:	40011000 	.word	0x40011000
 800249c:	40020400 	.word	0x40020400
 80024a0:	40020000 	.word	0x40020000

080024a4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80024a8:	2214      	movs	r2, #20
 80024aa:	2100      	movs	r1, #0
 80024ac:	a801      	add	r0, sp, #4
 80024ae:	f000 f8eb 	bl	8002688 <memset>
  if (FMC_Initialized) {
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_SDRAM_MspInit+0xb8>)
 80024b4:	681e      	ldr	r6, [r3, #0]
 80024b6:	2e00      	cmp	r6, #0
 80024b8:	d14d      	bne.n	8002556 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 80024ba:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024be:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024c0:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80024c2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c4:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <HAL_SDRAM_MspInit+0xbc>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c8:	4826      	ldr	r0, [pc, #152]	; (8002564 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80024ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80024d6:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024dc:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 80024e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024e6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024e8:	f7fe f970 	bl	80007cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 80024ec:	f248 1313 	movw	r3, #33043	; 0x8113
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024f0:	a901      	add	r1, sp, #4
 80024f2:	481d      	ldr	r0, [pc, #116]	; (8002568 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 80024f4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024fc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024fe:	f7fe f965 	bl	80007cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8002502:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002506:	a901      	add	r1, sp, #4
 8002508:	4818      	ldr	r0, [pc, #96]	; (800256c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800250a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002510:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002512:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002514:	f7fe f95a 	bl	80007cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002518:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800251c:	a901      	add	r1, sp, #4
 800251e:	4814      	ldr	r0, [pc, #80]	; (8002570 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002520:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002528:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800252a:	f7fe f94f 	bl	80007cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800252e:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002530:	a901      	add	r1, sp, #4
 8002532:	4810      	ldr	r0, [pc, #64]	; (8002574 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8002534:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800253c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800253e:	f7fe f945 	bl	80007cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002542:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002544:	a901      	add	r1, sp, #4
 8002546:	480c      	ldr	r0, [pc, #48]	; (8002578 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002548:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002550:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002552:	f7fe f93b 	bl	80007cc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002556:	b007      	add	sp, #28
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	bf00      	nop
 800255c:	20000090 	.word	0x20000090
 8002560:	40023800 	.word	0x40023800
 8002564:	40021000 	.word	0x40021000
 8002568:	40021800 	.word	0x40021800
 800256c:	40020c00 	.word	0x40020c00
 8002570:	40021400 	.word	0x40021400
 8002574:	40021c00 	.word	0x40021c00
 8002578:	40020800 	.word	0x40020800

0800257c <NMI_Handler>:
 800257c:	4770      	bx	lr

0800257e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257e:	e7fe      	b.n	800257e <HardFault_Handler>

08002580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002580:	e7fe      	b.n	8002580 <MemManage_Handler>

08002582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002582:	e7fe      	b.n	8002582 <BusFault_Handler>

08002584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002584:	e7fe      	b.n	8002584 <UsageFault_Handler>

08002586 <SVC_Handler>:
 8002586:	4770      	bx	lr

08002588 <DebugMon_Handler>:
 8002588:	4770      	bx	lr

0800258a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f7fe b850 	b.w	8000630 <HAL_IncTick>

08002590 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002590:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <_sbrk+0x2c>)
{
 8002594:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	b909      	cbnz	r1, 800259e <_sbrk+0xe>
		heap_end = &end;
 800259a:	4909      	ldr	r1, [pc, #36]	; (80025c0 <_sbrk+0x30>)
 800259c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800259e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80025a0:	4669      	mov	r1, sp
 80025a2:	4402      	add	r2, r0
 80025a4:	428a      	cmp	r2, r1
 80025a6:	d906      	bls.n	80025b6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80025a8:	f000 f844 	bl	8002634 <__errno>
 80025ac:	230c      	movs	r3, #12
 80025ae:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80025b6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80025b8:	bd08      	pop	{r3, pc}
 80025ba:	bf00      	nop
 80025bc:	20000094 	.word	0x20000094
 80025c0:	20000a18 	.word	0x20000a18

080025c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SystemInit+0x18>)
 80025c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025ca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80025ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002618 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025e6:	e003      	b.n	80025f0 <LoopCopyDataInit>

080025e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025ee:	3104      	adds	r1, #4

080025f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025f0:	480b      	ldr	r0, [pc, #44]	; (8002620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025f8:	d3f6      	bcc.n	80025e8 <CopyDataInit>
  ldr  r2, =_sbss
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025fc:	e002      	b.n	8002604 <LoopFillZerobss>

080025fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002600:	f842 3b04 	str.w	r3, [r2], #4

08002604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002608:	d3f9      	bcc.n	80025fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800260a:	f7ff ffdb 	bl	80025c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260e:	f000 f817 	bl	8002640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002612:	f7ff fc5f 	bl	8001ed4 <main>
  bx  lr    
 8002616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002618:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800261c:	08002f6c 	.word	0x08002f6c
  ldr  r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002624:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002628:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800262c:	20000a18 	.word	0x20000a18

08002630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC_IRQHandler>
	...

08002634 <__errno>:
 8002634:	4b01      	ldr	r3, [pc, #4]	; (800263c <__errno+0x8>)
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	2000000c 	.word	0x2000000c

08002640 <__libc_init_array>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	4e0d      	ldr	r6, [pc, #52]	; (8002678 <__libc_init_array+0x38>)
 8002644:	4c0d      	ldr	r4, [pc, #52]	; (800267c <__libc_init_array+0x3c>)
 8002646:	1ba4      	subs	r4, r4, r6
 8002648:	10a4      	asrs	r4, r4, #2
 800264a:	2500      	movs	r5, #0
 800264c:	42a5      	cmp	r5, r4
 800264e:	d109      	bne.n	8002664 <__libc_init_array+0x24>
 8002650:	4e0b      	ldr	r6, [pc, #44]	; (8002680 <__libc_init_array+0x40>)
 8002652:	4c0c      	ldr	r4, [pc, #48]	; (8002684 <__libc_init_array+0x44>)
 8002654:	f000 fc3e 	bl	8002ed4 <_init>
 8002658:	1ba4      	subs	r4, r4, r6
 800265a:	10a4      	asrs	r4, r4, #2
 800265c:	2500      	movs	r5, #0
 800265e:	42a5      	cmp	r5, r4
 8002660:	d105      	bne.n	800266e <__libc_init_array+0x2e>
 8002662:	bd70      	pop	{r4, r5, r6, pc}
 8002664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002668:	4798      	blx	r3
 800266a:	3501      	adds	r5, #1
 800266c:	e7ee      	b.n	800264c <__libc_init_array+0xc>
 800266e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002672:	4798      	blx	r3
 8002674:	3501      	adds	r5, #1
 8002676:	e7f2      	b.n	800265e <__libc_init_array+0x1e>
 8002678:	08002f64 	.word	0x08002f64
 800267c:	08002f64 	.word	0x08002f64
 8002680:	08002f64 	.word	0x08002f64
 8002684:	08002f68 	.word	0x08002f68

08002688 <memset>:
 8002688:	4402      	add	r2, r0
 800268a:	4603      	mov	r3, r0
 800268c:	4293      	cmp	r3, r2
 800268e:	d100      	bne.n	8002692 <memset+0xa>
 8002690:	4770      	bx	lr
 8002692:	f803 1b01 	strb.w	r1, [r3], #1
 8002696:	e7f9      	b.n	800268c <memset+0x4>

08002698 <siprintf>:
 8002698:	b40e      	push	{r1, r2, r3}
 800269a:	b500      	push	{lr}
 800269c:	b09c      	sub	sp, #112	; 0x70
 800269e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80026a2:	ab1d      	add	r3, sp, #116	; 0x74
 80026a4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80026a8:	9002      	str	r0, [sp, #8]
 80026aa:	9006      	str	r0, [sp, #24]
 80026ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026b0:	480a      	ldr	r0, [pc, #40]	; (80026dc <siprintf+0x44>)
 80026b2:	9104      	str	r1, [sp, #16]
 80026b4:	9107      	str	r1, [sp, #28]
 80026b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80026be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80026c2:	6800      	ldr	r0, [r0, #0]
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	a902      	add	r1, sp, #8
 80026c8:	f000 f866 	bl	8002798 <_svfiprintf_r>
 80026cc:	9b02      	ldr	r3, [sp, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	b01c      	add	sp, #112	; 0x70
 80026d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80026d8:	b003      	add	sp, #12
 80026da:	4770      	bx	lr
 80026dc:	2000000c 	.word	0x2000000c

080026e0 <__ssputs_r>:
 80026e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026e4:	688e      	ldr	r6, [r1, #8]
 80026e6:	429e      	cmp	r6, r3
 80026e8:	4682      	mov	sl, r0
 80026ea:	460c      	mov	r4, r1
 80026ec:	4691      	mov	r9, r2
 80026ee:	4698      	mov	r8, r3
 80026f0:	d835      	bhi.n	800275e <__ssputs_r+0x7e>
 80026f2:	898a      	ldrh	r2, [r1, #12]
 80026f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026f8:	d031      	beq.n	800275e <__ssputs_r+0x7e>
 80026fa:	6825      	ldr	r5, [r4, #0]
 80026fc:	6909      	ldr	r1, [r1, #16]
 80026fe:	1a6f      	subs	r7, r5, r1
 8002700:	6965      	ldr	r5, [r4, #20]
 8002702:	2302      	movs	r3, #2
 8002704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002708:	fb95 f5f3 	sdiv	r5, r5, r3
 800270c:	f108 0301 	add.w	r3, r8, #1
 8002710:	443b      	add	r3, r7
 8002712:	429d      	cmp	r5, r3
 8002714:	bf38      	it	cc
 8002716:	461d      	movcc	r5, r3
 8002718:	0553      	lsls	r3, r2, #21
 800271a:	d531      	bpl.n	8002780 <__ssputs_r+0xa0>
 800271c:	4629      	mov	r1, r5
 800271e:	f000 fb39 	bl	8002d94 <_malloc_r>
 8002722:	4606      	mov	r6, r0
 8002724:	b950      	cbnz	r0, 800273c <__ssputs_r+0x5c>
 8002726:	230c      	movs	r3, #12
 8002728:	f8ca 3000 	str.w	r3, [sl]
 800272c:	89a3      	ldrh	r3, [r4, #12]
 800272e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002732:	81a3      	strh	r3, [r4, #12]
 8002734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800273c:	463a      	mov	r2, r7
 800273e:	6921      	ldr	r1, [r4, #16]
 8002740:	f000 fab4 	bl	8002cac <memcpy>
 8002744:	89a3      	ldrh	r3, [r4, #12]
 8002746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800274a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274e:	81a3      	strh	r3, [r4, #12]
 8002750:	6126      	str	r6, [r4, #16]
 8002752:	6165      	str	r5, [r4, #20]
 8002754:	443e      	add	r6, r7
 8002756:	1bed      	subs	r5, r5, r7
 8002758:	6026      	str	r6, [r4, #0]
 800275a:	60a5      	str	r5, [r4, #8]
 800275c:	4646      	mov	r6, r8
 800275e:	4546      	cmp	r6, r8
 8002760:	bf28      	it	cs
 8002762:	4646      	movcs	r6, r8
 8002764:	4632      	mov	r2, r6
 8002766:	4649      	mov	r1, r9
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	f000 faaa 	bl	8002cc2 <memmove>
 800276e:	68a3      	ldr	r3, [r4, #8]
 8002770:	1b9b      	subs	r3, r3, r6
 8002772:	60a3      	str	r3, [r4, #8]
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	441e      	add	r6, r3
 8002778:	6026      	str	r6, [r4, #0]
 800277a:	2000      	movs	r0, #0
 800277c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002780:	462a      	mov	r2, r5
 8002782:	f000 fb65 	bl	8002e50 <_realloc_r>
 8002786:	4606      	mov	r6, r0
 8002788:	2800      	cmp	r0, #0
 800278a:	d1e1      	bne.n	8002750 <__ssputs_r+0x70>
 800278c:	6921      	ldr	r1, [r4, #16]
 800278e:	4650      	mov	r0, sl
 8002790:	f000 fab2 	bl	8002cf8 <_free_r>
 8002794:	e7c7      	b.n	8002726 <__ssputs_r+0x46>
	...

08002798 <_svfiprintf_r>:
 8002798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279c:	b09d      	sub	sp, #116	; 0x74
 800279e:	4680      	mov	r8, r0
 80027a0:	9303      	str	r3, [sp, #12]
 80027a2:	898b      	ldrh	r3, [r1, #12]
 80027a4:	061c      	lsls	r4, r3, #24
 80027a6:	460d      	mov	r5, r1
 80027a8:	4616      	mov	r6, r2
 80027aa:	d50f      	bpl.n	80027cc <_svfiprintf_r+0x34>
 80027ac:	690b      	ldr	r3, [r1, #16]
 80027ae:	b96b      	cbnz	r3, 80027cc <_svfiprintf_r+0x34>
 80027b0:	2140      	movs	r1, #64	; 0x40
 80027b2:	f000 faef 	bl	8002d94 <_malloc_r>
 80027b6:	6028      	str	r0, [r5, #0]
 80027b8:	6128      	str	r0, [r5, #16]
 80027ba:	b928      	cbnz	r0, 80027c8 <_svfiprintf_r+0x30>
 80027bc:	230c      	movs	r3, #12
 80027be:	f8c8 3000 	str.w	r3, [r8]
 80027c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c6:	e0c5      	b.n	8002954 <_svfiprintf_r+0x1bc>
 80027c8:	2340      	movs	r3, #64	; 0x40
 80027ca:	616b      	str	r3, [r5, #20]
 80027cc:	2300      	movs	r3, #0
 80027ce:	9309      	str	r3, [sp, #36]	; 0x24
 80027d0:	2320      	movs	r3, #32
 80027d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027d6:	2330      	movs	r3, #48	; 0x30
 80027d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027dc:	f04f 0b01 	mov.w	fp, #1
 80027e0:	4637      	mov	r7, r6
 80027e2:	463c      	mov	r4, r7
 80027e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d13c      	bne.n	8002866 <_svfiprintf_r+0xce>
 80027ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80027f0:	d00b      	beq.n	800280a <_svfiprintf_r+0x72>
 80027f2:	4653      	mov	r3, sl
 80027f4:	4632      	mov	r2, r6
 80027f6:	4629      	mov	r1, r5
 80027f8:	4640      	mov	r0, r8
 80027fa:	f7ff ff71 	bl	80026e0 <__ssputs_r>
 80027fe:	3001      	adds	r0, #1
 8002800:	f000 80a3 	beq.w	800294a <_svfiprintf_r+0x1b2>
 8002804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002806:	4453      	add	r3, sl
 8002808:	9309      	str	r3, [sp, #36]	; 0x24
 800280a:	783b      	ldrb	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 809c 	beq.w	800294a <_svfiprintf_r+0x1b2>
 8002812:	2300      	movs	r3, #0
 8002814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002818:	9304      	str	r3, [sp, #16]
 800281a:	9307      	str	r3, [sp, #28]
 800281c:	9205      	str	r2, [sp, #20]
 800281e:	9306      	str	r3, [sp, #24]
 8002820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002824:	931a      	str	r3, [sp, #104]	; 0x68
 8002826:	2205      	movs	r2, #5
 8002828:	7821      	ldrb	r1, [r4, #0]
 800282a:	4850      	ldr	r0, [pc, #320]	; (800296c <_svfiprintf_r+0x1d4>)
 800282c:	f7fd fcf8 	bl	8000220 <memchr>
 8002830:	1c67      	adds	r7, r4, #1
 8002832:	9b04      	ldr	r3, [sp, #16]
 8002834:	b9d8      	cbnz	r0, 800286e <_svfiprintf_r+0xd6>
 8002836:	06d9      	lsls	r1, r3, #27
 8002838:	bf44      	itt	mi
 800283a:	2220      	movmi	r2, #32
 800283c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002840:	071a      	lsls	r2, r3, #28
 8002842:	bf44      	itt	mi
 8002844:	222b      	movmi	r2, #43	; 0x2b
 8002846:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800284a:	7822      	ldrb	r2, [r4, #0]
 800284c:	2a2a      	cmp	r2, #42	; 0x2a
 800284e:	d016      	beq.n	800287e <_svfiprintf_r+0xe6>
 8002850:	9a07      	ldr	r2, [sp, #28]
 8002852:	2100      	movs	r1, #0
 8002854:	200a      	movs	r0, #10
 8002856:	4627      	mov	r7, r4
 8002858:	3401      	adds	r4, #1
 800285a:	783b      	ldrb	r3, [r7, #0]
 800285c:	3b30      	subs	r3, #48	; 0x30
 800285e:	2b09      	cmp	r3, #9
 8002860:	d951      	bls.n	8002906 <_svfiprintf_r+0x16e>
 8002862:	b1c9      	cbz	r1, 8002898 <_svfiprintf_r+0x100>
 8002864:	e011      	b.n	800288a <_svfiprintf_r+0xf2>
 8002866:	2b25      	cmp	r3, #37	; 0x25
 8002868:	d0c0      	beq.n	80027ec <_svfiprintf_r+0x54>
 800286a:	4627      	mov	r7, r4
 800286c:	e7b9      	b.n	80027e2 <_svfiprintf_r+0x4a>
 800286e:	4a3f      	ldr	r2, [pc, #252]	; (800296c <_svfiprintf_r+0x1d4>)
 8002870:	1a80      	subs	r0, r0, r2
 8002872:	fa0b f000 	lsl.w	r0, fp, r0
 8002876:	4318      	orrs	r0, r3
 8002878:	9004      	str	r0, [sp, #16]
 800287a:	463c      	mov	r4, r7
 800287c:	e7d3      	b.n	8002826 <_svfiprintf_r+0x8e>
 800287e:	9a03      	ldr	r2, [sp, #12]
 8002880:	1d11      	adds	r1, r2, #4
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	9103      	str	r1, [sp, #12]
 8002886:	2a00      	cmp	r2, #0
 8002888:	db01      	blt.n	800288e <_svfiprintf_r+0xf6>
 800288a:	9207      	str	r2, [sp, #28]
 800288c:	e004      	b.n	8002898 <_svfiprintf_r+0x100>
 800288e:	4252      	negs	r2, r2
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	9207      	str	r2, [sp, #28]
 8002896:	9304      	str	r3, [sp, #16]
 8002898:	783b      	ldrb	r3, [r7, #0]
 800289a:	2b2e      	cmp	r3, #46	; 0x2e
 800289c:	d10e      	bne.n	80028bc <_svfiprintf_r+0x124>
 800289e:	787b      	ldrb	r3, [r7, #1]
 80028a0:	2b2a      	cmp	r3, #42	; 0x2a
 80028a2:	f107 0101 	add.w	r1, r7, #1
 80028a6:	d132      	bne.n	800290e <_svfiprintf_r+0x176>
 80028a8:	9b03      	ldr	r3, [sp, #12]
 80028aa:	1d1a      	adds	r2, r3, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	9203      	str	r2, [sp, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bfb8      	it	lt
 80028b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80028b8:	3702      	adds	r7, #2
 80028ba:	9305      	str	r3, [sp, #20]
 80028bc:	4c2c      	ldr	r4, [pc, #176]	; (8002970 <_svfiprintf_r+0x1d8>)
 80028be:	7839      	ldrb	r1, [r7, #0]
 80028c0:	2203      	movs	r2, #3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7fd fcac 	bl	8000220 <memchr>
 80028c8:	b138      	cbz	r0, 80028da <_svfiprintf_r+0x142>
 80028ca:	2340      	movs	r3, #64	; 0x40
 80028cc:	1b00      	subs	r0, r0, r4
 80028ce:	fa03 f000 	lsl.w	r0, r3, r0
 80028d2:	9b04      	ldr	r3, [sp, #16]
 80028d4:	4303      	orrs	r3, r0
 80028d6:	9304      	str	r3, [sp, #16]
 80028d8:	3701      	adds	r7, #1
 80028da:	7839      	ldrb	r1, [r7, #0]
 80028dc:	4825      	ldr	r0, [pc, #148]	; (8002974 <_svfiprintf_r+0x1dc>)
 80028de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028e2:	2206      	movs	r2, #6
 80028e4:	1c7e      	adds	r6, r7, #1
 80028e6:	f7fd fc9b 	bl	8000220 <memchr>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d035      	beq.n	800295a <_svfiprintf_r+0x1c2>
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <_svfiprintf_r+0x1e0>)
 80028f0:	b9fb      	cbnz	r3, 8002932 <_svfiprintf_r+0x19a>
 80028f2:	9b03      	ldr	r3, [sp, #12]
 80028f4:	3307      	adds	r3, #7
 80028f6:	f023 0307 	bic.w	r3, r3, #7
 80028fa:	3308      	adds	r3, #8
 80028fc:	9303      	str	r3, [sp, #12]
 80028fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002900:	444b      	add	r3, r9
 8002902:	9309      	str	r3, [sp, #36]	; 0x24
 8002904:	e76c      	b.n	80027e0 <_svfiprintf_r+0x48>
 8002906:	fb00 3202 	mla	r2, r0, r2, r3
 800290a:	2101      	movs	r1, #1
 800290c:	e7a3      	b.n	8002856 <_svfiprintf_r+0xbe>
 800290e:	2300      	movs	r3, #0
 8002910:	9305      	str	r3, [sp, #20]
 8002912:	4618      	mov	r0, r3
 8002914:	240a      	movs	r4, #10
 8002916:	460f      	mov	r7, r1
 8002918:	3101      	adds	r1, #1
 800291a:	783a      	ldrb	r2, [r7, #0]
 800291c:	3a30      	subs	r2, #48	; 0x30
 800291e:	2a09      	cmp	r2, #9
 8002920:	d903      	bls.n	800292a <_svfiprintf_r+0x192>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0ca      	beq.n	80028bc <_svfiprintf_r+0x124>
 8002926:	9005      	str	r0, [sp, #20]
 8002928:	e7c8      	b.n	80028bc <_svfiprintf_r+0x124>
 800292a:	fb04 2000 	mla	r0, r4, r0, r2
 800292e:	2301      	movs	r3, #1
 8002930:	e7f1      	b.n	8002916 <_svfiprintf_r+0x17e>
 8002932:	ab03      	add	r3, sp, #12
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	462a      	mov	r2, r5
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <_svfiprintf_r+0x1e4>)
 800293a:	a904      	add	r1, sp, #16
 800293c:	4640      	mov	r0, r8
 800293e:	f3af 8000 	nop.w
 8002942:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002946:	4681      	mov	r9, r0
 8002948:	d1d9      	bne.n	80028fe <_svfiprintf_r+0x166>
 800294a:	89ab      	ldrh	r3, [r5, #12]
 800294c:	065b      	lsls	r3, r3, #25
 800294e:	f53f af38 	bmi.w	80027c2 <_svfiprintf_r+0x2a>
 8002952:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002954:	b01d      	add	sp, #116	; 0x74
 8002956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800295a:	ab03      	add	r3, sp, #12
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	462a      	mov	r2, r5
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <_svfiprintf_r+0x1e4>)
 8002962:	a904      	add	r1, sp, #16
 8002964:	4640      	mov	r0, r8
 8002966:	f000 f881 	bl	8002a6c <_printf_i>
 800296a:	e7ea      	b.n	8002942 <_svfiprintf_r+0x1aa>
 800296c:	08002f26 	.word	0x08002f26
 8002970:	08002f2c 	.word	0x08002f2c
 8002974:	08002f30 	.word	0x08002f30
 8002978:	00000000 	.word	0x00000000
 800297c:	080026e1 	.word	0x080026e1

08002980 <_printf_common>:
 8002980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002984:	4691      	mov	r9, r2
 8002986:	461f      	mov	r7, r3
 8002988:	688a      	ldr	r2, [r1, #8]
 800298a:	690b      	ldr	r3, [r1, #16]
 800298c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002990:	4293      	cmp	r3, r2
 8002992:	bfb8      	it	lt
 8002994:	4613      	movlt	r3, r2
 8002996:	f8c9 3000 	str.w	r3, [r9]
 800299a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800299e:	4606      	mov	r6, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	b112      	cbz	r2, 80029aa <_printf_common+0x2a>
 80029a4:	3301      	adds	r3, #1
 80029a6:	f8c9 3000 	str.w	r3, [r9]
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	0699      	lsls	r1, r3, #26
 80029ae:	bf42      	ittt	mi
 80029b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80029b4:	3302      	addmi	r3, #2
 80029b6:	f8c9 3000 	strmi.w	r3, [r9]
 80029ba:	6825      	ldr	r5, [r4, #0]
 80029bc:	f015 0506 	ands.w	r5, r5, #6
 80029c0:	d107      	bne.n	80029d2 <_printf_common+0x52>
 80029c2:	f104 0a19 	add.w	sl, r4, #25
 80029c6:	68e3      	ldr	r3, [r4, #12]
 80029c8:	f8d9 2000 	ldr.w	r2, [r9]
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	429d      	cmp	r5, r3
 80029d0:	db29      	blt.n	8002a26 <_printf_common+0xa6>
 80029d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	3300      	adds	r3, #0
 80029da:	bf18      	it	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	0692      	lsls	r2, r2, #26
 80029e0:	d42e      	bmi.n	8002a40 <_printf_common+0xc0>
 80029e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029e6:	4639      	mov	r1, r7
 80029e8:	4630      	mov	r0, r6
 80029ea:	47c0      	blx	r8
 80029ec:	3001      	adds	r0, #1
 80029ee:	d021      	beq.n	8002a34 <_printf_common+0xb4>
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	68e5      	ldr	r5, [r4, #12]
 80029f4:	f8d9 2000 	ldr.w	r2, [r9]
 80029f8:	f003 0306 	and.w	r3, r3, #6
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	bf08      	it	eq
 8002a00:	1aad      	subeq	r5, r5, r2
 8002a02:	68a3      	ldr	r3, [r4, #8]
 8002a04:	6922      	ldr	r2, [r4, #16]
 8002a06:	bf0c      	ite	eq
 8002a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a0c:	2500      	movne	r5, #0
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	bfc4      	itt	gt
 8002a12:	1a9b      	subgt	r3, r3, r2
 8002a14:	18ed      	addgt	r5, r5, r3
 8002a16:	f04f 0900 	mov.w	r9, #0
 8002a1a:	341a      	adds	r4, #26
 8002a1c:	454d      	cmp	r5, r9
 8002a1e:	d11b      	bne.n	8002a58 <_printf_common+0xd8>
 8002a20:	2000      	movs	r0, #0
 8002a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a26:	2301      	movs	r3, #1
 8002a28:	4652      	mov	r2, sl
 8002a2a:	4639      	mov	r1, r7
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	47c0      	blx	r8
 8002a30:	3001      	adds	r0, #1
 8002a32:	d103      	bne.n	8002a3c <_printf_common+0xbc>
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3c:	3501      	adds	r5, #1
 8002a3e:	e7c2      	b.n	80029c6 <_printf_common+0x46>
 8002a40:	18e1      	adds	r1, r4, r3
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	2030      	movs	r0, #48	; 0x30
 8002a46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a4a:	4422      	add	r2, r4
 8002a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a54:	3302      	adds	r3, #2
 8002a56:	e7c4      	b.n	80029e2 <_printf_common+0x62>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4622      	mov	r2, r4
 8002a5c:	4639      	mov	r1, r7
 8002a5e:	4630      	mov	r0, r6
 8002a60:	47c0      	blx	r8
 8002a62:	3001      	adds	r0, #1
 8002a64:	d0e6      	beq.n	8002a34 <_printf_common+0xb4>
 8002a66:	f109 0901 	add.w	r9, r9, #1
 8002a6a:	e7d7      	b.n	8002a1c <_printf_common+0x9c>

08002a6c <_printf_i>:
 8002a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a70:	4617      	mov	r7, r2
 8002a72:	7e0a      	ldrb	r2, [r1, #24]
 8002a74:	b085      	sub	sp, #20
 8002a76:	2a6e      	cmp	r2, #110	; 0x6e
 8002a78:	4698      	mov	r8, r3
 8002a7a:	4606      	mov	r6, r0
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a80:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002a84:	f000 80bc 	beq.w	8002c00 <_printf_i+0x194>
 8002a88:	d81a      	bhi.n	8002ac0 <_printf_i+0x54>
 8002a8a:	2a63      	cmp	r2, #99	; 0x63
 8002a8c:	d02e      	beq.n	8002aec <_printf_i+0x80>
 8002a8e:	d80a      	bhi.n	8002aa6 <_printf_i+0x3a>
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	f000 80c8 	beq.w	8002c26 <_printf_i+0x1ba>
 8002a96:	2a58      	cmp	r2, #88	; 0x58
 8002a98:	f000 808a 	beq.w	8002bb0 <_printf_i+0x144>
 8002a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002aa0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002aa4:	e02a      	b.n	8002afc <_printf_i+0x90>
 8002aa6:	2a64      	cmp	r2, #100	; 0x64
 8002aa8:	d001      	beq.n	8002aae <_printf_i+0x42>
 8002aaa:	2a69      	cmp	r2, #105	; 0x69
 8002aac:	d1f6      	bne.n	8002a9c <_printf_i+0x30>
 8002aae:	6821      	ldr	r1, [r4, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002ab6:	d023      	beq.n	8002b00 <_printf_i+0x94>
 8002ab8:	1d11      	adds	r1, r2, #4
 8002aba:	6019      	str	r1, [r3, #0]
 8002abc:	6813      	ldr	r3, [r2, #0]
 8002abe:	e027      	b.n	8002b10 <_printf_i+0xa4>
 8002ac0:	2a73      	cmp	r2, #115	; 0x73
 8002ac2:	f000 80b4 	beq.w	8002c2e <_printf_i+0x1c2>
 8002ac6:	d808      	bhi.n	8002ada <_printf_i+0x6e>
 8002ac8:	2a6f      	cmp	r2, #111	; 0x6f
 8002aca:	d02a      	beq.n	8002b22 <_printf_i+0xb6>
 8002acc:	2a70      	cmp	r2, #112	; 0x70
 8002ace:	d1e5      	bne.n	8002a9c <_printf_i+0x30>
 8002ad0:	680a      	ldr	r2, [r1, #0]
 8002ad2:	f042 0220 	orr.w	r2, r2, #32
 8002ad6:	600a      	str	r2, [r1, #0]
 8002ad8:	e003      	b.n	8002ae2 <_printf_i+0x76>
 8002ada:	2a75      	cmp	r2, #117	; 0x75
 8002adc:	d021      	beq.n	8002b22 <_printf_i+0xb6>
 8002ade:	2a78      	cmp	r2, #120	; 0x78
 8002ae0:	d1dc      	bne.n	8002a9c <_printf_i+0x30>
 8002ae2:	2278      	movs	r2, #120	; 0x78
 8002ae4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002ae8:	496e      	ldr	r1, [pc, #440]	; (8002ca4 <_printf_i+0x238>)
 8002aea:	e064      	b.n	8002bb6 <_printf_i+0x14a>
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002af2:	1d11      	adds	r1, r2, #4
 8002af4:	6019      	str	r1, [r3, #0]
 8002af6:	6813      	ldr	r3, [r2, #0]
 8002af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0a3      	b.n	8002c48 <_printf_i+0x1dc>
 8002b00:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002b04:	f102 0104 	add.w	r1, r2, #4
 8002b08:	6019      	str	r1, [r3, #0]
 8002b0a:	d0d7      	beq.n	8002abc <_printf_i+0x50>
 8002b0c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	da03      	bge.n	8002b1c <_printf_i+0xb0>
 8002b14:	222d      	movs	r2, #45	; 0x2d
 8002b16:	425b      	negs	r3, r3
 8002b18:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b1c:	4962      	ldr	r1, [pc, #392]	; (8002ca8 <_printf_i+0x23c>)
 8002b1e:	220a      	movs	r2, #10
 8002b20:	e017      	b.n	8002b52 <_printf_i+0xe6>
 8002b22:	6820      	ldr	r0, [r4, #0]
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002b2a:	d003      	beq.n	8002b34 <_printf_i+0xc8>
 8002b2c:	1d08      	adds	r0, r1, #4
 8002b2e:	6018      	str	r0, [r3, #0]
 8002b30:	680b      	ldr	r3, [r1, #0]
 8002b32:	e006      	b.n	8002b42 <_printf_i+0xd6>
 8002b34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b38:	f101 0004 	add.w	r0, r1, #4
 8002b3c:	6018      	str	r0, [r3, #0]
 8002b3e:	d0f7      	beq.n	8002b30 <_printf_i+0xc4>
 8002b40:	880b      	ldrh	r3, [r1, #0]
 8002b42:	4959      	ldr	r1, [pc, #356]	; (8002ca8 <_printf_i+0x23c>)
 8002b44:	2a6f      	cmp	r2, #111	; 0x6f
 8002b46:	bf14      	ite	ne
 8002b48:	220a      	movne	r2, #10
 8002b4a:	2208      	moveq	r2, #8
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002b52:	6865      	ldr	r5, [r4, #4]
 8002b54:	60a5      	str	r5, [r4, #8]
 8002b56:	2d00      	cmp	r5, #0
 8002b58:	f2c0 809c 	blt.w	8002c94 <_printf_i+0x228>
 8002b5c:	6820      	ldr	r0, [r4, #0]
 8002b5e:	f020 0004 	bic.w	r0, r0, #4
 8002b62:	6020      	str	r0, [r4, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d13f      	bne.n	8002be8 <_printf_i+0x17c>
 8002b68:	2d00      	cmp	r5, #0
 8002b6a:	f040 8095 	bne.w	8002c98 <_printf_i+0x22c>
 8002b6e:	4675      	mov	r5, lr
 8002b70:	2a08      	cmp	r2, #8
 8002b72:	d10b      	bne.n	8002b8c <_printf_i+0x120>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	07da      	lsls	r2, r3, #31
 8002b78:	d508      	bpl.n	8002b8c <_printf_i+0x120>
 8002b7a:	6923      	ldr	r3, [r4, #16]
 8002b7c:	6862      	ldr	r2, [r4, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	bfde      	ittt	le
 8002b82:	2330      	movle	r3, #48	; 0x30
 8002b84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002b8c:	ebae 0305 	sub.w	r3, lr, r5
 8002b90:	6123      	str	r3, [r4, #16]
 8002b92:	f8cd 8000 	str.w	r8, [sp]
 8002b96:	463b      	mov	r3, r7
 8002b98:	aa03      	add	r2, sp, #12
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f7ff feef 	bl	8002980 <_printf_common>
 8002ba2:	3001      	adds	r0, #1
 8002ba4:	d155      	bne.n	8002c52 <_printf_i+0x1e6>
 8002ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002baa:	b005      	add	sp, #20
 8002bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bb0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002bb4:	493c      	ldr	r1, [pc, #240]	; (8002ca8 <_printf_i+0x23c>)
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002bbe:	f100 0504 	add.w	r5, r0, #4
 8002bc2:	601d      	str	r5, [r3, #0]
 8002bc4:	d001      	beq.n	8002bca <_printf_i+0x15e>
 8002bc6:	6803      	ldr	r3, [r0, #0]
 8002bc8:	e002      	b.n	8002bd0 <_printf_i+0x164>
 8002bca:	0655      	lsls	r5, r2, #25
 8002bcc:	d5fb      	bpl.n	8002bc6 <_printf_i+0x15a>
 8002bce:	8803      	ldrh	r3, [r0, #0]
 8002bd0:	07d0      	lsls	r0, r2, #31
 8002bd2:	bf44      	itt	mi
 8002bd4:	f042 0220 	orrmi.w	r2, r2, #32
 8002bd8:	6022      	strmi	r2, [r4, #0]
 8002bda:	b91b      	cbnz	r3, 8002be4 <_printf_i+0x178>
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	f022 0220 	bic.w	r2, r2, #32
 8002be2:	6022      	str	r2, [r4, #0]
 8002be4:	2210      	movs	r2, #16
 8002be6:	e7b1      	b.n	8002b4c <_printf_i+0xe0>
 8002be8:	4675      	mov	r5, lr
 8002bea:	fbb3 f0f2 	udiv	r0, r3, r2
 8002bee:	fb02 3310 	mls	r3, r2, r0, r3
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	d1f5      	bne.n	8002bea <_printf_i+0x17e>
 8002bfe:	e7b7      	b.n	8002b70 <_printf_i+0x104>
 8002c00:	6808      	ldr	r0, [r1, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	6949      	ldr	r1, [r1, #20]
 8002c06:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002c0a:	d004      	beq.n	8002c16 <_printf_i+0x1aa>
 8002c0c:	1d10      	adds	r0, r2, #4
 8002c0e:	6018      	str	r0, [r3, #0]
 8002c10:	6813      	ldr	r3, [r2, #0]
 8002c12:	6019      	str	r1, [r3, #0]
 8002c14:	e007      	b.n	8002c26 <_printf_i+0x1ba>
 8002c16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c1a:	f102 0004 	add.w	r0, r2, #4
 8002c1e:	6018      	str	r0, [r3, #0]
 8002c20:	6813      	ldr	r3, [r2, #0]
 8002c22:	d0f6      	beq.n	8002c12 <_printf_i+0x1a6>
 8002c24:	8019      	strh	r1, [r3, #0]
 8002c26:	2300      	movs	r3, #0
 8002c28:	6123      	str	r3, [r4, #16]
 8002c2a:	4675      	mov	r5, lr
 8002c2c:	e7b1      	b.n	8002b92 <_printf_i+0x126>
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	1d11      	adds	r1, r2, #4
 8002c32:	6019      	str	r1, [r3, #0]
 8002c34:	6815      	ldr	r5, [r2, #0]
 8002c36:	6862      	ldr	r2, [r4, #4]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f7fd faf0 	bl	8000220 <memchr>
 8002c40:	b108      	cbz	r0, 8002c46 <_printf_i+0x1da>
 8002c42:	1b40      	subs	r0, r0, r5
 8002c44:	6060      	str	r0, [r4, #4]
 8002c46:	6863      	ldr	r3, [r4, #4]
 8002c48:	6123      	str	r3, [r4, #16]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c50:	e79f      	b.n	8002b92 <_printf_i+0x126>
 8002c52:	6923      	ldr	r3, [r4, #16]
 8002c54:	462a      	mov	r2, r5
 8002c56:	4639      	mov	r1, r7
 8002c58:	4630      	mov	r0, r6
 8002c5a:	47c0      	blx	r8
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	d0a2      	beq.n	8002ba6 <_printf_i+0x13a>
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	079b      	lsls	r3, r3, #30
 8002c64:	d507      	bpl.n	8002c76 <_printf_i+0x20a>
 8002c66:	2500      	movs	r5, #0
 8002c68:	f104 0919 	add.w	r9, r4, #25
 8002c6c:	68e3      	ldr	r3, [r4, #12]
 8002c6e:	9a03      	ldr	r2, [sp, #12]
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	429d      	cmp	r5, r3
 8002c74:	db05      	blt.n	8002c82 <_printf_i+0x216>
 8002c76:	68e0      	ldr	r0, [r4, #12]
 8002c78:	9b03      	ldr	r3, [sp, #12]
 8002c7a:	4298      	cmp	r0, r3
 8002c7c:	bfb8      	it	lt
 8002c7e:	4618      	movlt	r0, r3
 8002c80:	e793      	b.n	8002baa <_printf_i+0x13e>
 8002c82:	2301      	movs	r3, #1
 8002c84:	464a      	mov	r2, r9
 8002c86:	4639      	mov	r1, r7
 8002c88:	4630      	mov	r0, r6
 8002c8a:	47c0      	blx	r8
 8002c8c:	3001      	adds	r0, #1
 8002c8e:	d08a      	beq.n	8002ba6 <_printf_i+0x13a>
 8002c90:	3501      	adds	r5, #1
 8002c92:	e7eb      	b.n	8002c6c <_printf_i+0x200>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1a7      	bne.n	8002be8 <_printf_i+0x17c>
 8002c98:	780b      	ldrb	r3, [r1, #0]
 8002c9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ca2:	e765      	b.n	8002b70 <_printf_i+0x104>
 8002ca4:	08002f48 	.word	0x08002f48
 8002ca8:	08002f37 	.word	0x08002f37

08002cac <memcpy>:
 8002cac:	b510      	push	{r4, lr}
 8002cae:	1e43      	subs	r3, r0, #1
 8002cb0:	440a      	add	r2, r1
 8002cb2:	4291      	cmp	r1, r2
 8002cb4:	d100      	bne.n	8002cb8 <memcpy+0xc>
 8002cb6:	bd10      	pop	{r4, pc}
 8002cb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cc0:	e7f7      	b.n	8002cb2 <memcpy+0x6>

08002cc2 <memmove>:
 8002cc2:	4288      	cmp	r0, r1
 8002cc4:	b510      	push	{r4, lr}
 8002cc6:	eb01 0302 	add.w	r3, r1, r2
 8002cca:	d803      	bhi.n	8002cd4 <memmove+0x12>
 8002ccc:	1e42      	subs	r2, r0, #1
 8002cce:	4299      	cmp	r1, r3
 8002cd0:	d10c      	bne.n	8002cec <memmove+0x2a>
 8002cd2:	bd10      	pop	{r4, pc}
 8002cd4:	4298      	cmp	r0, r3
 8002cd6:	d2f9      	bcs.n	8002ccc <memmove+0xa>
 8002cd8:	1881      	adds	r1, r0, r2
 8002cda:	1ad2      	subs	r2, r2, r3
 8002cdc:	42d3      	cmn	r3, r2
 8002cde:	d100      	bne.n	8002ce2 <memmove+0x20>
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ce6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002cea:	e7f7      	b.n	8002cdc <memmove+0x1a>
 8002cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cf0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002cf4:	e7eb      	b.n	8002cce <memmove+0xc>
	...

08002cf8 <_free_r>:
 8002cf8:	b538      	push	{r3, r4, r5, lr}
 8002cfa:	4605      	mov	r5, r0
 8002cfc:	2900      	cmp	r1, #0
 8002cfe:	d045      	beq.n	8002d8c <_free_r+0x94>
 8002d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d04:	1f0c      	subs	r4, r1, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bfb8      	it	lt
 8002d0a:	18e4      	addlt	r4, r4, r3
 8002d0c:	f000 f8d6 	bl	8002ebc <__malloc_lock>
 8002d10:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <_free_r+0x98>)
 8002d12:	6813      	ldr	r3, [r2, #0]
 8002d14:	4610      	mov	r0, r2
 8002d16:	b933      	cbnz	r3, 8002d26 <_free_r+0x2e>
 8002d18:	6063      	str	r3, [r4, #4]
 8002d1a:	6014      	str	r4, [r2, #0]
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d22:	f000 b8cc 	b.w	8002ebe <__malloc_unlock>
 8002d26:	42a3      	cmp	r3, r4
 8002d28:	d90c      	bls.n	8002d44 <_free_r+0x4c>
 8002d2a:	6821      	ldr	r1, [r4, #0]
 8002d2c:	1862      	adds	r2, r4, r1
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	bf04      	itt	eq
 8002d32:	681a      	ldreq	r2, [r3, #0]
 8002d34:	685b      	ldreq	r3, [r3, #4]
 8002d36:	6063      	str	r3, [r4, #4]
 8002d38:	bf04      	itt	eq
 8002d3a:	1852      	addeq	r2, r2, r1
 8002d3c:	6022      	streq	r2, [r4, #0]
 8002d3e:	6004      	str	r4, [r0, #0]
 8002d40:	e7ec      	b.n	8002d1c <_free_r+0x24>
 8002d42:	4613      	mov	r3, r2
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	b10a      	cbz	r2, 8002d4c <_free_r+0x54>
 8002d48:	42a2      	cmp	r2, r4
 8002d4a:	d9fa      	bls.n	8002d42 <_free_r+0x4a>
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	1858      	adds	r0, r3, r1
 8002d50:	42a0      	cmp	r0, r4
 8002d52:	d10b      	bne.n	8002d6c <_free_r+0x74>
 8002d54:	6820      	ldr	r0, [r4, #0]
 8002d56:	4401      	add	r1, r0
 8002d58:	1858      	adds	r0, r3, r1
 8002d5a:	4282      	cmp	r2, r0
 8002d5c:	6019      	str	r1, [r3, #0]
 8002d5e:	d1dd      	bne.n	8002d1c <_free_r+0x24>
 8002d60:	6810      	ldr	r0, [r2, #0]
 8002d62:	6852      	ldr	r2, [r2, #4]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	4401      	add	r1, r0
 8002d68:	6019      	str	r1, [r3, #0]
 8002d6a:	e7d7      	b.n	8002d1c <_free_r+0x24>
 8002d6c:	d902      	bls.n	8002d74 <_free_r+0x7c>
 8002d6e:	230c      	movs	r3, #12
 8002d70:	602b      	str	r3, [r5, #0]
 8002d72:	e7d3      	b.n	8002d1c <_free_r+0x24>
 8002d74:	6820      	ldr	r0, [r4, #0]
 8002d76:	1821      	adds	r1, r4, r0
 8002d78:	428a      	cmp	r2, r1
 8002d7a:	bf04      	itt	eq
 8002d7c:	6811      	ldreq	r1, [r2, #0]
 8002d7e:	6852      	ldreq	r2, [r2, #4]
 8002d80:	6062      	str	r2, [r4, #4]
 8002d82:	bf04      	itt	eq
 8002d84:	1809      	addeq	r1, r1, r0
 8002d86:	6021      	streq	r1, [r4, #0]
 8002d88:	605c      	str	r4, [r3, #4]
 8002d8a:	e7c7      	b.n	8002d1c <_free_r+0x24>
 8002d8c:	bd38      	pop	{r3, r4, r5, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000098 	.word	0x20000098

08002d94 <_malloc_r>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	1ccd      	adds	r5, r1, #3
 8002d98:	f025 0503 	bic.w	r5, r5, #3
 8002d9c:	3508      	adds	r5, #8
 8002d9e:	2d0c      	cmp	r5, #12
 8002da0:	bf38      	it	cc
 8002da2:	250c      	movcc	r5, #12
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	4606      	mov	r6, r0
 8002da8:	db01      	blt.n	8002dae <_malloc_r+0x1a>
 8002daa:	42a9      	cmp	r1, r5
 8002dac:	d903      	bls.n	8002db6 <_malloc_r+0x22>
 8002dae:	230c      	movs	r3, #12
 8002db0:	6033      	str	r3, [r6, #0]
 8002db2:	2000      	movs	r0, #0
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
 8002db6:	f000 f881 	bl	8002ebc <__malloc_lock>
 8002dba:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <_malloc_r+0xb4>)
 8002dbc:	6814      	ldr	r4, [r2, #0]
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	b991      	cbnz	r1, 8002de8 <_malloc_r+0x54>
 8002dc2:	4c22      	ldr	r4, [pc, #136]	; (8002e4c <_malloc_r+0xb8>)
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	b91b      	cbnz	r3, 8002dd0 <_malloc_r+0x3c>
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f000 f867 	bl	8002e9c <_sbrk_r>
 8002dce:	6020      	str	r0, [r4, #0]
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	f000 f862 	bl	8002e9c <_sbrk_r>
 8002dd8:	1c43      	adds	r3, r0, #1
 8002dda:	d126      	bne.n	8002e2a <_malloc_r+0x96>
 8002ddc:	230c      	movs	r3, #12
 8002dde:	6033      	str	r3, [r6, #0]
 8002de0:	4630      	mov	r0, r6
 8002de2:	f000 f86c 	bl	8002ebe <__malloc_unlock>
 8002de6:	e7e4      	b.n	8002db2 <_malloc_r+0x1e>
 8002de8:	680b      	ldr	r3, [r1, #0]
 8002dea:	1b5b      	subs	r3, r3, r5
 8002dec:	d41a      	bmi.n	8002e24 <_malloc_r+0x90>
 8002dee:	2b0b      	cmp	r3, #11
 8002df0:	d90f      	bls.n	8002e12 <_malloc_r+0x7e>
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	50cd      	str	r5, [r1, r3]
 8002df6:	18cc      	adds	r4, r1, r3
 8002df8:	4630      	mov	r0, r6
 8002dfa:	f000 f860 	bl	8002ebe <__malloc_unlock>
 8002dfe:	f104 000b 	add.w	r0, r4, #11
 8002e02:	1d23      	adds	r3, r4, #4
 8002e04:	f020 0007 	bic.w	r0, r0, #7
 8002e08:	1ac3      	subs	r3, r0, r3
 8002e0a:	d01b      	beq.n	8002e44 <_malloc_r+0xb0>
 8002e0c:	425a      	negs	r2, r3
 8002e0e:	50e2      	str	r2, [r4, r3]
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
 8002e12:	428c      	cmp	r4, r1
 8002e14:	bf0d      	iteet	eq
 8002e16:	6863      	ldreq	r3, [r4, #4]
 8002e18:	684b      	ldrne	r3, [r1, #4]
 8002e1a:	6063      	strne	r3, [r4, #4]
 8002e1c:	6013      	streq	r3, [r2, #0]
 8002e1e:	bf18      	it	ne
 8002e20:	460c      	movne	r4, r1
 8002e22:	e7e9      	b.n	8002df8 <_malloc_r+0x64>
 8002e24:	460c      	mov	r4, r1
 8002e26:	6849      	ldr	r1, [r1, #4]
 8002e28:	e7ca      	b.n	8002dc0 <_malloc_r+0x2c>
 8002e2a:	1cc4      	adds	r4, r0, #3
 8002e2c:	f024 0403 	bic.w	r4, r4, #3
 8002e30:	42a0      	cmp	r0, r4
 8002e32:	d005      	beq.n	8002e40 <_malloc_r+0xac>
 8002e34:	1a21      	subs	r1, r4, r0
 8002e36:	4630      	mov	r0, r6
 8002e38:	f000 f830 	bl	8002e9c <_sbrk_r>
 8002e3c:	3001      	adds	r0, #1
 8002e3e:	d0cd      	beq.n	8002ddc <_malloc_r+0x48>
 8002e40:	6025      	str	r5, [r4, #0]
 8002e42:	e7d9      	b.n	8002df8 <_malloc_r+0x64>
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
 8002e46:	bf00      	nop
 8002e48:	20000098 	.word	0x20000098
 8002e4c:	2000009c 	.word	0x2000009c

08002e50 <_realloc_r>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	4607      	mov	r7, r0
 8002e54:	4614      	mov	r4, r2
 8002e56:	460e      	mov	r6, r1
 8002e58:	b921      	cbnz	r1, 8002e64 <_realloc_r+0x14>
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e60:	f7ff bf98 	b.w	8002d94 <_malloc_r>
 8002e64:	b922      	cbnz	r2, 8002e70 <_realloc_r+0x20>
 8002e66:	f7ff ff47 	bl	8002cf8 <_free_r>
 8002e6a:	4625      	mov	r5, r4
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e70:	f000 f826 	bl	8002ec0 <_malloc_usable_size_r>
 8002e74:	4284      	cmp	r4, r0
 8002e76:	d90f      	bls.n	8002e98 <_realloc_r+0x48>
 8002e78:	4621      	mov	r1, r4
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	f7ff ff8a 	bl	8002d94 <_malloc_r>
 8002e80:	4605      	mov	r5, r0
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d0f2      	beq.n	8002e6c <_realloc_r+0x1c>
 8002e86:	4631      	mov	r1, r6
 8002e88:	4622      	mov	r2, r4
 8002e8a:	f7ff ff0f 	bl	8002cac <memcpy>
 8002e8e:	4631      	mov	r1, r6
 8002e90:	4638      	mov	r0, r7
 8002e92:	f7ff ff31 	bl	8002cf8 <_free_r>
 8002e96:	e7e9      	b.n	8002e6c <_realloc_r+0x1c>
 8002e98:	4635      	mov	r5, r6
 8002e9a:	e7e7      	b.n	8002e6c <_realloc_r+0x1c>

08002e9c <_sbrk_r>:
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	4c06      	ldr	r4, [pc, #24]	; (8002eb8 <_sbrk_r+0x1c>)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	4605      	mov	r5, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	6023      	str	r3, [r4, #0]
 8002ea8:	f7ff fb72 	bl	8002590 <_sbrk>
 8002eac:	1c43      	adds	r3, r0, #1
 8002eae:	d102      	bne.n	8002eb6 <_sbrk_r+0x1a>
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	b103      	cbz	r3, 8002eb6 <_sbrk_r+0x1a>
 8002eb4:	602b      	str	r3, [r5, #0]
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
 8002eb8:	20000a14 	.word	0x20000a14

08002ebc <__malloc_lock>:
 8002ebc:	4770      	bx	lr

08002ebe <__malloc_unlock>:
 8002ebe:	4770      	bx	lr

08002ec0 <_malloc_usable_size_r>:
 8002ec0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	f1a0 0004 	sub.w	r0, r0, #4
 8002eca:	bfbc      	itt	lt
 8002ecc:	580b      	ldrlt	r3, [r1, r0]
 8002ece:	18c0      	addlt	r0, r0, r3
 8002ed0:	4770      	bx	lr
	...

08002ed4 <_init>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr

08002ee0 <_fini>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	bf00      	nop
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr
